;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(vc-revision-history query-replace-history grep-regexp-history xref--read-identifier-history read-envvar-name-history counsel-git-grep-history counsel-git-history info-lookup-history counsel-describe-symbol-history counsel-imenu-history counsel-grep-history swiper-history counsel-apropos-history counsel-M-x-history ivy-history input-method-history read-from-kill-ring-history shell-command-history read-expression-history empty-history woman-topic-history evil-ex-history search-ring buffer-name-history bookmark-history minibuffer-history command-history file-name-history read-number-history extended-command-history goto-line-history yes-or-no-p-history))
(setq vc-revision-history '(#("origin/feature/echo" 0 19 (ivy-index 8)) #("origin/feature/payssion" 0 23 (ivy-index 2))))
(setq query-replace-history '("fasle" "true" "hello2" "hello" "hello" "fuck" "fuck" "ackk" "ackk" "test"))
(setq xref--read-identifier-history '(#("(*mycardHandler).HandleNotify" 0 29 (idx 9 ivy-index 0)) #("(*mycardHandler).PlaceOrder" 0 27 (idx 7 ivy-index 8)) #("(*paypalHandler).onCheckoutOrderApproved" 0 40 (ivy-index 0 idx 6))))
(setq counsel-git-grep-history '(#("homebrew" 0 8 (ivy-index 0)) "./projectile-bookmarks.eld:1:(\"~/.emacs.d/\" \"~/Library/Mobile Documents/com~apple~CloudDocs/note/doc/\" \"~/code/company/server/\" \"/opt/homebrew/\" \"~/code/self/probation/probation/admin/\" \"~/code/company/probation/\")"))
(setq counsel-git-history '(#("probation_" 0 10 (ivy-index 0)) "src/probation/admin/controller/probation_controller.go"))
(setq counsel-describe-symbol-history '(#("^evil-define-key" 0 16 (ivy-index 2)) "evil-define-key"))
(setq swiper-history '("create" #("dash" 0 4 (ivy-index 0)) #(" ;; dashboard" 0 1 (swiper-line-number 53 display "53  ") 1 4 (fontified t face font-lock-comment-delimiter-face) 4 13 (fontified t face font-lock-comment-face)) #("ff" 0 2 (ivy-index 0)) #(" (define-key evil-normal-state-map (kbd \"<leader>ff\") 'counsel-find-file )" 0 1 (swiper-line-number 21 display "21 ") 1 2 (fontified t face (rainbow-delimiters-depth-1-face)) 2 35 (fontified t) 35 36 (fontified t face (rainbow-delimiters-depth-2-face)) 36 40 (fontified t) 40 52 (fontified t face font-lock-string-face) 52 53 (fontified t face (rainbow-delimiters-depth-2-face)) 53 73 (fontified t) 73 74 (fontified t face (rainbow-delimiters-depth-1-face))) "f" #("neotree" 0 7 (ivy-index 0)) #(" (use-package neotree" 0 1 (swiper-line-number 66 display "66  ") 1 2 (fontified t face (rainbow-delimiters-depth-1-face)) 2 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 21 (fontified t face font-lock-constant-face)) "swiper-query-replacekkk" #("test" 0 4 (ivy-index 0)) #(" test" 0 1 (display "7 " swiper-line-number 7)) "model  " #(" 			res.Code = int32(logic.TODO)" 0 1 (display "214 " swiper-line-number 214 ivy-index 213) 1 15 (fontified t ivy-index 213) 15 20 (face font-lock-function-name-face fontified t ivy-index 213) 20 21 (face (rainbow-delimiters-depth-4-face) fontified t ivy-index 213) 21 31 (fontified t ivy-index 213) 31 32 (face (rainbow-delimiters-depth-4-face) fontified t ivy-index 213)) #("history" 0 7 (ivy-index 11)) #("                    nil 'vc-revision-history)" 0 1 (swiper-line-number 2346 display "2346 ") 1 44 (fontified t) 44 45 (fontified t face (rainbow-delimiters-depth-5-face))) #("neo" 0 3 (ivy-index 0)) #(" (define-key evil-normal-state-map (kbd \"<leader>tt\") 'neotree)" 0 1 (display "45 " swiper-line-number 45) 1 2 (face (rainbow-delimiters-depth-1-face) fontified t) 2 21 (fontified t) 21 35 (fontified t) 35 36 (fontified t face (rainbow-delimiters-depth-2-face)) 36 40 (fontified t) 40 50 (fontified t face font-lock-string-face) 50 51 (fontified t face font-lock-string-face) 51 52 (fontified t face font-lock-string-face) 52 53 (fontified t face (rainbow-delimiters-depth-2-face)) 53 62 (fontified t) 62 63 (fontified t face (rainbow-delimiters-depth-1-face))) #("neot" 0 4 (ivy-index 0)) #(" (define-key evil-normal-state-map (kbd \"<leader>ft\") 'neotree-find)" 0 1 (display "16 " swiper-line-number 16) 1 2 (face (rainbow-delimiters-depth-1-face) fontified t) 2 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-2-face) fontified t) 36 40 (fontified t) 40 52 (face font-lock-string-face fontified t) 52 53 (face (rainbow-delimiters-depth-2-face) fontified t) 53 67 (fontified t) 67 68 (face (rainbow-delimiters-depth-1-face) fontified t)) "45" #("treemacs" 0 8 (ivy-index 0)) #(" (use-package treemacs" 0 1 (display "79  " swiper-line-number 79) 1 2 (face (rainbow-delimiters-depth-1-face) fontified t) 2 13 (face font-lock-keyword-face fontified t) 13 14 (fontified t) 14 22 (face font-lock-constant-face fontified t)) #("pro" 0 3 (ivy-index 0)) #(" (use-package projectile" 0 1 (swiper-line-number 15 display "15  ") 1 2 (fontified t face (rainbow-delimiters-depth-1-face)) 2 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 24 (fontified t face font-lock-constant-face)) #(" (use-package projectile" 0 1 (swiper-line-number 16 display "16 ") 1 2 (fontified t face (rainbow-delimiters-depth-1-face)) 2 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 24 (fontified t face font-lock-constant-face)) "proj" #("proj" 0 4 (ivy-index 0)) #("   ;; (setq dashboard-projects-backend 'projectile) ;; 读者可以暂时注释掉这一行，等安装了 projectile 后再使用" 0 1 (swiper-line-number 41 display "41  ") 1 3 (fontified t) 3 6 (fontified t face font-lock-comment-delimiter-face) 6 88 (fontified t face font-lock-comment-face)) "pr" "la" "l" "ui" #("ui" 0 2 (ivy-index 1)) #(" (require 'lsp)" 0 1 (swiper-line-number 2 display "2  ") 1 2 (fontified t face (rainbow-delimiters-depth-1-face)) 2 9 (fontified t face font-lock-keyword-face) 9 11 (fontified t) 11 14 (fontified t face font-lock-constant-face) 14 15 (fontified t face (rainbow-delimiters-depth-1-face))) #("lsp" 0 3 (ivy-index 0)) #(" (require 'lsp)" 0 1 (swiper-line-number 2 display "2  ") 1 2 (fontified t face (rainbow-delimiters-depth-1-face)) 2 9 (fontified t face font-lock-keyword-face) 9 11 (fontified t) 11 14 (fontified t face font-lock-constant-face) 14 15 (fontified t face (rainbow-delimiters-depth-1-face))) "lsp-ui" #("mon" 0 3 (ivy-index 1)) #("   (load-theme 'monokai t)" 0 1 (display "11  " swiper-line-number 11) 1 26 (fontified t)) "s" #("posframe" 0 8 (ivy-index 8)) #("   posframe                       1.3.2          available    gnu      Pop a posframe (just a frame) at point" 0 1 (swiper-line-number 4349 display "4349 ") 1 3 (tabulated-list-id #s(package-desc posframe (1 3 2) "Pop a posframe (just a frame) at point" ((emacs (26 1))) tar "gnu" nil ((:url . "https://github.com/tumashu/posframe") (:keywords "convenience" "tooltip") (:maintainer "Feng Shu" . "tumashu@163.com") (:authors ("Feng Shu" . "tumashu@163.com")) (:commit . "aa88860a16e28a311f81e18f1d9ed2e7d9e33991")) nil) tabulated-list-entry [("posframe" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc posframe (1 3 2) "Pop a posframe (just a frame) at point" ((emacs (26 1))) tar "gnu" nil ((:url . "https://github.com/tumashu/posframe") (:keywords "convenience" "tooltip") (:maintainer "Feng Shu" . "tumashu@163.com") (:authors ("Feng Shu" . "tumashu@163.com")) (:commit . "aa88860a16e28a311f81e18f1d9ed2e7d9e33991")) nil) action package-menu-describe-package) #("1.3.2" 0 5 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("gnu" 0 3 (font-lock-face package-status-available)) #("Pop a posframe (just a frame) at point" 0 38 (font-lock-face package-description))]) 3 11 (button (t) category default-button face package-name font-lock-face package-name follow-link t package-desc #s(package-desc posframe (1 3 2) "Pop a posframe (just a frame) at point" ((emacs (26 1))) tar "gnu" nil ((:url . "https://github.com/tumashu/posframe") (:keywords "convenience" "tooltip") (:maintainer "Feng Shu" . "tumashu@163.com") (:authors ("Feng Shu" . "tumashu@163.com")) (:commit . "aa88860a16e28a311f81e18f1d9ed2e7d9e33991")) nil) action package-menu-describe-package tabulated-list-column-name "Package" tabulated-list-id #s(package-desc posframe (1 3 2) "Pop a posframe (just a frame) at point" ((emacs (26 1))) tar "gnu" nil ((:url . "https://github.com/tumashu/posframe") (:keywords "convenience" "tooltip") (:maintainer "Feng Shu" . "tumashu@163.com") (:authors ("Feng Shu" . "tumashu@163.com")) (:commit . "aa88860a16e28a311f81e18f1d9ed2e7d9e33991")) nil) tabulated-list-entry [("posframe" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc posframe (1 3 2) "Pop a posframe (just a frame) at point" ((emacs (26 1))) tar "gnu" nil ((:url . "https://github.com/tumashu/posframe") (:keywords "convenience" "tooltip") (:maintainer "Feng Shu" . "tumashu@163.com") (:authors ("Feng Shu" . "tumashu@163.com")) (:commit . "aa88860a16e28a311f81e18f1d9ed2e7d9e33991")) nil) action package-menu-describe-package) #("1.3.2" 0 5 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("gnu" 0 3 (font-lock-face package-status-available)) #("Pop a posframe (just a frame) at point" 0 38 (font-lock-face package-description))]) 11 12 (tabulated-list-column-name "Package" tabulated-list-id #s(package-desc posframe (1 3 2) "Pop a posframe (just a frame) at point" ((emacs (26 1))) tar "gnu" nil ((:url . "https://github.com/tumashu/posframe") (:keywords "convenience" "tooltip") (:maintainer "Feng Shu" . "tumashu@163.com") (:authors ("Feng Shu" . "tumashu@163.com")) (:commit . "aa88860a16e28a311f81e18f1d9ed2e7d9e33991")) nil) tabulated-list-entry [("posframe" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc posframe (1 3 2) "Pop a posframe (just a frame) at point" ((emacs (26 1))) tar "gnu" nil ((:url . "https://github.com/tumashu/posframe") (:keywords "convenience" "tooltip") (:maintainer "Feng Shu" . "tumashu@163.com") (:authors ("Feng Shu" . "tumashu@163.com")) (:commit . "aa88860a16e28a311f81e18f1d9ed2e7d9e33991")) nil) action package-menu-describe-package) #("1.3.2" 0 5 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("gnu" 0 3 (font-lock-face package-status-available)) #("Pop a posframe (just a frame) at point" 0 38 (font-lock-face package-description))]) 12 34 (display (space :align-to 33) tabulated-list-column-name "Package" tabulated-list-id #s(package-desc posframe (1 3 2) "Pop a posframe (just a frame) at point" ((emacs (26 1))) tar "gnu" nil ((:url . "https://github.com/tumashu/posframe") (:keywords "convenience" "tooltip") (:maintainer "Feng Shu" . "tumashu@163.com") (:authors ("Feng Shu" . "tumashu@163.com")) (:commit . "aa88860a16e28a311f81e18f1d9ed2e7d9e33991")) nil) tabulated-list-entry [("posframe" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc posframe (1 3 2) "Pop a posframe (just a frame) at point" ((emacs (26 1))) tar "gnu" nil ((:url . "https://github.com/tumashu/posframe") (:keywords "convenience" "tooltip") (:maintainer "Feng Shu" . "tumashu@163.com") (:authors ("Feng Shu" . "tumashu@163.com")) (:commit . "aa88860a16e28a311f81e18f1d9ed2e7d9e33991")) nil) action package-menu-describe-package) #("1.3.2" 0 5 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("gnu" 0 3 (font-lock-face package-status-available)) #("Pop a posframe (just a frame) at point" 0 38 (font-lock-face package-description))]) 34 39 (font-lock-face package-status-available help-echo #("Version: 1.3.2" 9 14 (font-lock-face package-status-available)) tabulated-list-column-name "Version" tabulated-list-id #s(package-desc posframe (1 3 2) "Pop a posframe (just a frame) at point" ((emacs (26 1))) tar "gnu" nil ((:url . "https://github.com/tumashu/posframe") (:keywords "convenience" "tooltip") (:maintainer "Feng Shu" . "tumashu@163.com") (:authors ("Feng Shu" . "tumashu@163.com")) (:commit . "aa88860a16e28a311f81e18f1d9ed2e7d9e33991")) nil) tabulated-list-entry [("posframe" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc posframe (1 3 2) "Pop a posframe (just a frame) at point" ((emacs (26 1))) tar "gnu" nil ((:url . "https://github.com/tumashu/posframe") (:keywords "convenience" "tooltip") (:maintainer "Feng Shu" . "tumashu@163.com") (:authors ("Feng Shu" . "tumashu@163.com")) (:commit . "aa88860a16e28a311f81e18f1d9ed2e7d9e33991")) nil) action package-menu-describe-package) #("1.3.2" 0 5 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("gnu" 0 3 (font-lock-face package-status-available)) #("Pop a posframe (just a frame) at point" 0 38 (font-lock-face package-description))]) 39 40 (tabulated-list-column-name "Version" tabulated-list-id #s(package-desc posframe (1 3 2) "Pop a posframe (just a frame) at point" ((emacs (26 1))) tar "gnu" nil ((:url . "https://github.com/tumashu/posframe") (:keywords "convenience" "tooltip") (:maintainer "Feng Shu" . "tumashu@163.com") (:authors ("Feng Shu" . "tumashu@163.com")) (:commit . "aa88860a16e28a311f81e18f1d9ed2e7d9e33991")) nil) tabulated-list-entry [("posframe" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc posframe (1 3 2) "Pop a posframe (just a frame) at point" ((emacs (26 1))) tar "gnu" nil ((:url . "https://github.com/tumashu/posframe") (:keywords "convenience" "tooltip") (:maintainer "Feng Shu" . "tumashu@163.com") (:authors ("Feng Shu" . "tumashu@163.com")) (:commit . "aa88860a16e28a311f81e18f1d9ed2e7d9e33991")) nil) action package-menu-describe-package) #("1.3.2" 0 5 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("gnu" 0 3 (font-lock-face package-status-available)) #("Pop a posframe (just a frame) at point" 0 38 (font-lock-face package-description))]) 40 49 (display (space :align-to 48) tabulated-list-column-name "Version" tabulated-list-id #s(package-desc posframe (1 3 2) "Pop a posframe (just a frame) at point" ((emacs (26 1))) tar "gnu" nil ((:url . "https://github.com/tumashu/posframe") (:keywords "convenience" "tooltip") (:maintainer "Feng Shu" . "tumashu@163.com") (:authors ("Feng Shu" . "tumashu@163.com")) (:commit . "aa88860a16e28a311f81e18f1d9ed2e7d9e33991")) nil) tabulated-list-entry [("posframe" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc posframe (1 3 2) "Pop a posframe (just a frame) at point" ((emacs (26 1))) tar "gnu" nil ((:url . "https://github.com/tumashu/posframe") (:keywords "convenience" "tooltip") (:maintainer "Feng Shu" . "tumashu@163.com") (:authors ("Feng Shu" . "tumashu@163.com")) (:commit . "aa88860a16e28a311f81e18f1d9ed2e7d9e33991")) nil) action package-menu-describe-package) #("1.3.2" 0 5 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("gnu" 0 3 (font-lock-face package-status-available)) #("Pop a posframe (just a frame) at point" 0 38 (font-lock-face package-description))]) 49 58 (font-lock-face package-status-available help-echo #("Status: available" 8 17 (font-lock-face package-status-available)) tabulated-list-column-name "Status" tabulated-list-id #s(package-desc posframe (1 3 2) "Pop a posframe (just a frame) at point" ((emacs (26 1))) tar "gnu" nil ((:url . "https://github.com/tumashu/posframe") (:keywords "convenience" "tooltip") (:maintainer "Feng Shu" . "tumashu@163.com") (:authors ("Feng Shu" . "tumashu@163.com")) (:commit . "aa88860a16e28a311f81e18f1d9ed2e7d9e33991")) nil) tabulated-list-entry [("posframe" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc posframe (1 3 2) "Pop a posframe (just a frame) at point" ((emacs (26 1))) tar "gnu" nil ((:url . "https://github.com/tumashu/posframe") (:keywords "convenience" "tooltip") (:maintainer "Feng Shu" . "tumashu@163.com") (:authors ("Feng Shu" . "tumashu@163.com")) (:commit . "aa88860a16e28a311f81e18f1d9ed2e7d9e33991")) nil) action package-menu-describe-package) #("1.3.2" 0 5 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("gnu" 0 3 (font-lock-face package-status-available)) #("Pop a posframe (just a frame) at point" 0 38 (font-lock-face package-description))]) 58 59 (tabulated-list-column-name "Status" tabulated-list-id #s(package-desc posframe (1 3 2) "Pop a posframe (just a frame) at point" ((emacs (26 1))) tar "gnu" nil ((:url . "https://github.com/tumashu/posframe") (:keywords "convenience" "tooltip") (:maintainer "Feng Shu" . "tumashu@163.com") (:authors ("Feng Shu" . "tumashu@163.com")) (:commit . "aa88860a16e28a311f81e18f1d9ed2e7d9e33991")) nil) tabulated-list-entry [("posframe" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc posframe (1 3 2) "Pop a posframe (just a frame) at point" ((emacs (26 1))) tar "gnu" nil ((:url . "https://github.com/tumashu/posframe") (:keywords "convenience" "tooltip") (:maintainer "Feng Shu" . "tumashu@163.com") (:authors ("Feng Shu" . "tumashu@163.com")) (:commit . "aa88860a16e28a311f81e18f1d9ed2e7d9e33991")) nil) action package-menu-describe-package) #("1.3.2" 0 5 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("gnu" 0 3 (font-lock-face package-status-available)) #("Pop a posframe (just a frame) at point" 0 38 (font-lock-face package-description))]) 59 62 (display (space :align-to 61) tabulated-list-column-name "Status" tabulated-list-id #s(package-desc posframe (1 3 2) "Pop a posframe (just a frame) at point" ((emacs (26 1))) tar "gnu" nil ((:url . "https://github.com/tumashu/posframe") (:keywords "convenience" "tooltip") (:maintainer "Feng Shu" . "tumashu@163.com") (:authors ("Feng Shu" . "tumashu@163.com")) (:commit . "aa88860a16e28a311f81e18f1d9ed2e7d9e33991")) nil) tabulated-list-entry [("posframe" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc posframe (1 3 2) "Pop a posframe (just a frame) at point" ((emacs (26 1))) tar "gnu" nil ((:url . "https://github.com/tumashu/posframe") (:keywords "convenience" "tooltip") (:maintainer "Feng Shu" . "tumashu@163.com") (:authors ("Feng Shu" . "tumashu@163.com")) (:commit . "aa88860a16e28a311f81e18f1d9ed2e7d9e33991")) nil) action package-menu-describe-package) #("1.3.2" 0 5 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("gnu" 0 3 (font-lock-face package-status-available)) #("Pop a posframe (just a frame) at point" 0 38 (font-lock-face package-description))]) 62 65 (font-lock-face package-status-available help-echo #("Archive: gnu" 9 12 (font-lock-face package-status-available)) tabulated-list-column-name "Archive" tabulated-list-id #s(package-desc posframe (1 3 2) "Pop a posframe (just a frame) at point" ((emacs (26 1))) tar "gnu" nil ((:url . "https://github.com/tumashu/posframe") (:keywords "convenience" "tooltip") (:maintainer "Feng Shu" . "tumashu@163.com") (:authors ("Feng Shu" . "tumashu@163.com")) (:commit . "aa88860a16e28a311f81e18f1d9ed2e7d9e33991")) nil) tabulated-list-entry [("posframe" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc posframe (1 3 2) "Pop a posframe (just a frame) at point" ((emacs (26 1))) tar "gnu" nil ((:url . "https://github.com/tumashu/posframe") (:keywords "convenience" "tooltip") (:maintainer "Feng Shu" . "tumashu@163.com") (:authors ("Feng Shu" . "tumashu@163.com")) (:commit . "aa88860a16e28a311f81e18f1d9ed2e7d9e33991")) nil) action package-menu-describe-package) #("1.3.2" 0 5 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("gnu" 0 3 (font-lock-face package-status-available)) #("Pop a posframe (just a frame) at point" 0 38 (font-lock-face package-description))]) 65 66 (tabulated-list-column-name "Archive" tabulated-list-id #s(package-desc posframe (1 3 2) "Pop a posframe (just a frame) at point" ((emacs (26 1))) tar "gnu" nil ((:url . "https://github.com/tumashu/posframe") (:keywords "convenience" "tooltip") (:maintainer "Feng Shu" . "tumashu@163.com") (:authors ("Feng Shu" . "tumashu@163.com")) (:commit . "aa88860a16e28a311f81e18f1d9ed2e7d9e33991")) nil) tabulated-list-entry [("posframe" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc posframe (1 3 2) "Pop a posframe (just a frame) at point" ((emacs (26 1))) tar "gnu" nil ((:url . "https://github.com/tumashu/posframe") (:keywords "convenience" "tooltip") (:maintainer "Feng Shu" . "tumashu@163.com") (:authors ("Feng Shu" . "tumashu@163.com")) (:commit . "aa88860a16e28a311f81e18f1d9ed2e7d9e33991")) nil) action package-menu-describe-package) #("1.3.2" 0 5 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("gnu" 0 3 (font-lock-face package-status-available)) #("Pop a posframe (just a frame) at point" 0 38 (font-lock-face package-description))]) 66 71 (display (space :align-to 70) tabulated-list-column-name "Archive" tabulated-list-id #s(package-desc posframe (1 3 2) "Pop a posframe (just a frame) at point" ((emacs (26 1))) tar "gnu" nil ((:url . "https://github.com/tumashu/posframe") (:keywords "convenience" "tooltip") (:maintainer "Feng Shu" . "tumashu@163.com") (:authors ("Feng Shu" . "tumashu@163.com")) (:commit . "aa88860a16e28a311f81e18f1d9ed2e7d9e33991")) nil) tabulated-list-entry [("posframe" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc posframe (1 3 2) "Pop a posframe (just a frame) at point" ((emacs (26 1))) tar "gnu" nil ((:url . "https://github.com/tumashu/posframe") (:keywords "convenience" "tooltip") (:maintainer "Feng Shu" . "tumashu@163.com") (:authors ("Feng Shu" . "tumashu@163.com")) (:commit . "aa88860a16e28a311f81e18f1d9ed2e7d9e33991")) nil) action package-menu-describe-package) #("1.3.2" 0 5 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("gnu" 0 3 (font-lock-face package-status-available)) #("Pop a posframe (just a frame) at point" 0 38 (font-lock-face package-description))]) 71 109 (font-lock-face package-description help-echo #("Description: Pop a posframe (just a frame) at point" 13 51 (font-lock-face package-description)) tabulated-list-column-name "Description" tabulated-list-id #s(package-desc posframe (1 3 2) "Pop a posframe (just a frame) at point" ((emacs (26 1))) tar "gnu" nil ((:url . "https://github.com/tumashu/posframe") (:keywords "convenience" "tooltip") (:maintainer "Feng Shu" . "tumashu@163.com") (:authors ("Feng Shu" . "tumashu@163.com")) (:commit . "aa88860a16e28a311f81e18f1d9ed2e7d9e33991")) nil) tabulated-list-entry [("posframe" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc posframe (1 3 2) "Pop a posframe (just a frame) at point" ((emacs (26 1))) tar "gnu" nil ((:url . "https://github.com/tumashu/posframe") (:keywords "convenience" "tooltip") (:maintainer "Feng Shu" . "tumashu@163.com") (:authors ("Feng Shu" . "tumashu@163.com")) (:commit . "aa88860a16e28a311f81e18f1d9ed2e7d9e33991")) nil) action package-menu-describe-package) #("1.3.2" 0 5 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("gnu" 0 3 (font-lock-face package-status-available)) #("Pop a posframe (just a frame) at point" 0 38 (font-lock-face package-description))])) #("   company-posframe               20230104.1229  available    melpa    Use a posframe as company candidate menu" 0 1 (swiper-line-number 738 display "738  ") 1 3 (tabulated-list-id #s(package-desc company-posframe (20230104 1229) "Use a posframe as company candidate menu" ((emacs (26 0)) (company (0 9 0)) (posframe (0 9 0))) single "melpa" nil ((:commit . "18d6641bba72cba3c00018cee737ea8b454f64a8") (:authors ("Clément Pit-Claudel, Feng Shu, Lars Andersen" . "expez@expez.com")) (:maintainer "Feng Shu" . "tumashu@163.com") (:keywords "abbrev" "convenience" "matching") (:url . "https://github.com/tumashu/company-posframe")) nil) tabulated-list-entry [("company-posframe" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc company-posframe (20230104 1229) "Use a posframe as company candidate menu" ((emacs (26 0)) (company (0 9 0)) (posframe (0 9 0))) single "melpa" nil ((:commit . "18d6641bba72cba3c00018cee737ea8b454f64a8") (:authors ("Clément Pit-Claudel, Feng Shu, Lars Andersen" . "expez@expez.com")) (:maintainer "Feng Shu" . "tumashu@163.com") (:keywords "abbrev" "convenience" "matching") (:url . "https://github.com/tumashu/company-posframe")) nil) action package-menu-describe-package) #("20230104.1229" 0 13 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa" 0 5 (font-lock-face package-status-available)) #("Use a posframe as company candidate menu" 0 40 (font-lock-face package-description))]) 3 19 (button (t) category default-button face package-name font-lock-face package-name follow-link t package-desc #s(package-desc company-posframe (20230104 1229) "Use a posframe as company candidate menu" ((emacs (26 0)) (company (0 9 0)) (posframe (0 9 0))) single "melpa" nil ((:commit . "18d6641bba72cba3c00018cee737ea8b454f64a8") (:authors ("Clément Pit-Claudel, Feng Shu, Lars Andersen" . "expez@expez.com")) (:maintainer "Feng Shu" . "tumashu@163.com") (:keywords "abbrev" "convenience" "matching") (:url . "https://github.com/tumashu/company-posframe")) nil) action package-menu-describe-package tabulated-list-column-name "Package" tabulated-list-id #s(package-desc company-posframe (20230104 1229) "Use a posframe as company candidate menu" ((emacs (26 0)) (company (0 9 0)) (posframe (0 9 0))) single "melpa" nil ((:commit . "18d6641bba72cba3c00018cee737ea8b454f64a8") (:authors ("Clément Pit-Claudel, Feng Shu, Lars Andersen" . "expez@expez.com")) (:maintainer "Feng Shu" . "tumashu@163.com") (:keywords "abbrev" "convenience" "matching") (:url . "https://github.com/tumashu/company-posframe")) nil) tabulated-list-entry [("company-posframe" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc company-posframe (20230104 1229) "Use a posframe as company candidate menu" ((emacs (26 0)) (company (0 9 0)) (posframe (0 9 0))) single "melpa" nil ((:commit . "18d6641bba72cba3c00018cee737ea8b454f64a8") (:authors ("Clément Pit-Claudel, Feng Shu, Lars Andersen" . "expez@expez.com")) (:maintainer "Feng Shu" . "tumashu@163.com") (:keywords "abbrev" "convenience" "matching") (:url . "https://github.com/tumashu/company-posframe")) nil) action package-menu-describe-package) #("20230104.1229" 0 13 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa" 0 5 (font-lock-face package-status-available)) #("Use a posframe as company candidate menu" 0 40 (font-lock-face package-description))]) 19 20 (tabulated-list-column-name "Package" tabulated-list-id #s(package-desc company-posframe (20230104 1229) "Use a posframe as company candidate menu" ((emacs (26 0)) (company (0 9 0)) (posframe (0 9 0))) single "melpa" nil ((:commit . "18d6641bba72cba3c00018cee737ea8b454f64a8") (:authors ("Clément Pit-Claudel, Feng Shu, Lars Andersen" . "expez@expez.com")) (:maintainer "Feng Shu" . "tumashu@163.com") (:keywords "abbrev" "convenience" "matching") (:url . "https://github.com/tumashu/company-posframe")) nil) tabulated-list-entry [("company-posframe" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc company-posframe (20230104 1229) "Use a posframe as company candidate menu" ((emacs (26 0)) (company (0 9 0)) (posframe (0 9 0))) single "melpa" nil ((:commit . "18d6641bba72cba3c00018cee737ea8b454f64a8") (:authors ("Clément Pit-Claudel, Feng Shu, Lars Andersen" . "expez@expez.com")) (:maintainer "Feng Shu" . "tumashu@163.com") (:keywords "abbrev" "convenience" "matching") (:url . "https://github.com/tumashu/company-posframe")) nil) action package-menu-describe-package) #("20230104.1229" 0 13 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa" 0 5 (font-lock-face package-status-available)) #("Use a posframe as company candidate menu" 0 40 (font-lock-face package-description))]) 20 34 (display (space :align-to 33) tabulated-list-column-name "Package" tabulated-list-id #s(package-desc company-posframe (20230104 1229) "Use a posframe as company candidate menu" ((emacs (26 0)) (company (0 9 0)) (posframe (0 9 0))) single "melpa" nil ((:commit . "18d6641bba72cba3c00018cee737ea8b454f64a8") (:authors ("Clément Pit-Claudel, Feng Shu, Lars Andersen" . "expez@expez.com")) (:maintainer "Feng Shu" . "tumashu@163.com") (:keywords "abbrev" "convenience" "matching") (:url . "https://github.com/tumashu/company-posframe")) nil) tabulated-list-entry [("company-posframe" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc company-posframe (20230104 1229) "Use a posframe as company candidate menu" ((emacs (26 0)) (company (0 9 0)) (posframe (0 9 0))) single "melpa" nil ((:commit . "18d6641bba72cba3c00018cee737ea8b454f64a8") (:authors ("Clément Pit-Claudel, Feng Shu, Lars Andersen" . "expez@expez.com")) (:maintainer "Feng Shu" . "tumashu@163.com") (:keywords "abbrev" "convenience" "matching") (:url . "https://github.com/tumashu/company-posframe")) nil) action package-menu-describe-package) #("20230104.1229" 0 13 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa" 0 5 (font-lock-face package-status-available)) #("Use a posframe as company candidate menu" 0 40 (font-lock-face package-description))]) 34 47 (font-lock-face package-status-available help-echo #("Version: 20230104.1229" 9 22 (font-lock-face package-status-available)) tabulated-list-column-name "Version" tabulated-list-id #s(package-desc company-posframe (20230104 1229) "Use a posframe as company candidate menu" ((emacs (26 0)) (company (0 9 0)) (posframe (0 9 0))) single "melpa" nil ((:commit . "18d6641bba72cba3c00018cee737ea8b454f64a8") (:authors ("Clément Pit-Claudel, Feng Shu, Lars Andersen" . "expez@expez.com")) (:maintainer "Feng Shu" . "tumashu@163.com") (:keywords "abbrev" "convenience" "matching") (:url . "https://github.com/tumashu/company-posframe")) nil) tabulated-list-entry [("company-posframe" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc company-posframe (20230104 1229) "Use a posframe as company candidate menu" ((emacs (26 0)) (company (0 9 0)) (posframe (0 9 0))) single "melpa" nil ((:commit . "18d6641bba72cba3c00018cee737ea8b454f64a8") (:authors ("Clément Pit-Claudel, Feng Shu, Lars Andersen" . "expez@expez.com")) (:maintainer "Feng Shu" . "tumashu@163.com") (:keywords "abbrev" "convenience" "matching") (:url . "https://github.com/tumashu/company-posframe")) nil) action package-menu-describe-package) #("20230104.1229" 0 13 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa" 0 5 (font-lock-face package-status-available)) #("Use a posframe as company candidate menu" 0 40 (font-lock-face package-description))]) 47 48 (tabulated-list-column-name "Version" tabulated-list-id #s(package-desc company-posframe (20230104 1229) "Use a posframe as company candidate menu" ((emacs (26 0)) (company (0 9 0)) (posframe (0 9 0))) single "melpa" nil ((:commit . "18d6641bba72cba3c00018cee737ea8b454f64a8") (:authors ("Clément Pit-Claudel, Feng Shu, Lars Andersen" . "expez@expez.com")) (:maintainer "Feng Shu" . "tumashu@163.com") (:keywords "abbrev" "convenience" "matching") (:url . "https://github.com/tumashu/company-posframe")) nil) tabulated-list-entry [("company-posframe" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc company-posframe (20230104 1229) "Use a posframe as company candidate menu" ((emacs (26 0)) (company (0 9 0)) (posframe (0 9 0))) single "melpa" nil ((:commit . "18d6641bba72cba3c00018cee737ea8b454f64a8") (:authors ("Clément Pit-Claudel, Feng Shu, Lars Andersen" . "expez@expez.com")) (:maintainer "Feng Shu" . "tumashu@163.com") (:keywords "abbrev" "convenience" "matching") (:url . "https://github.com/tumashu/company-posframe")) nil) action package-menu-describe-package) #("20230104.1229" 0 13 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa" 0 5 (font-lock-face package-status-available)) #("Use a posframe as company candidate menu" 0 40 (font-lock-face package-description))]) 48 49 (display (space :align-to 48) tabulated-list-column-name "Version" tabulated-list-id #s(package-desc company-posframe (20230104 1229) "Use a posframe as company candidate menu" ((emacs (26 0)) (company (0 9 0)) (posframe (0 9 0))) single "melpa" nil ((:commit . "18d6641bba72cba3c00018cee737ea8b454f64a8") (:authors ("Clément Pit-Claudel, Feng Shu, Lars Andersen" . "expez@expez.com")) (:maintainer "Feng Shu" . "tumashu@163.com") (:keywords "abbrev" "convenience" "matching") (:url . "https://github.com/tumashu/company-posframe")) nil) tabulated-list-entry [("company-posframe" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc company-posframe (20230104 1229) "Use a posframe as company candidate menu" ((emacs (26 0)) (company (0 9 0)) (posframe (0 9 0))) single "melpa" nil ((:commit . "18d6641bba72cba3c00018cee737ea8b454f64a8") (:authors ("Clément Pit-Claudel, Feng Shu, Lars Andersen" . "expez@expez.com")) (:maintainer "Feng Shu" . "tumashu@163.com") (:keywords "abbrev" "convenience" "matching") (:url . "https://github.com/tumashu/company-posframe")) nil) action package-menu-describe-package) #("20230104.1229" 0 13 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa" 0 5 (font-lock-face package-status-available)) #("Use a posframe as company candidate menu" 0 40 (font-lock-face package-description))]) 49 58 (font-lock-face package-status-available help-echo #("Status: available" 8 17 (font-lock-face package-status-available)) tabulated-list-column-name "Status" tabulated-list-id #s(package-desc company-posframe (20230104 1229) "Use a posframe as company candidate menu" ((emacs (26 0)) (company (0 9 0)) (posframe (0 9 0))) single "melpa" nil ((:commit . "18d6641bba72cba3c00018cee737ea8b454f64a8") (:authors ("Clément Pit-Claudel, Feng Shu, Lars Andersen" . "expez@expez.com")) (:maintainer "Feng Shu" . "tumashu@163.com") (:keywords "abbrev" "convenience" "matching") (:url . "https://github.com/tumashu/company-posframe")) nil) tabulated-list-entry [("company-posframe" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc company-posframe (20230104 1229) "Use a posframe as company candidate menu" ((emacs (26 0)) (company (0 9 0)) (posframe (0 9 0))) single "melpa" nil ((:commit . "18d6641bba72cba3c00018cee737ea8b454f64a8") (:authors ("Clément Pit-Claudel, Feng Shu, Lars Andersen" . "expez@expez.com")) (:maintainer "Feng Shu" . "tumashu@163.com") (:keywords "abbrev" "convenience" "matching") (:url . "https://github.com/tumashu/company-posframe")) nil) action package-menu-describe-package) #("20230104.1229" 0 13 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa" 0 5 (font-lock-face package-status-available)) #("Use a posframe as company candidate menu" 0 40 (font-lock-face package-description))]) 58 59 (tabulated-list-column-name "Status" tabulated-list-id #s(package-desc company-posframe (20230104 1229) "Use a posframe as company candidate menu" ((emacs (26 0)) (company (0 9 0)) (posframe (0 9 0))) single "melpa" nil ((:commit . "18d6641bba72cba3c00018cee737ea8b454f64a8") (:authors ("Clément Pit-Claudel, Feng Shu, Lars Andersen" . "expez@expez.com")) (:maintainer "Feng Shu" . "tumashu@163.com") (:keywords "abbrev" "convenience" "matching") (:url . "https://github.com/tumashu/company-posframe")) nil) tabulated-list-entry [("company-posframe" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc company-posframe (20230104 1229) "Use a posframe as company candidate menu" ((emacs (26 0)) (company (0 9 0)) (posframe (0 9 0))) single "melpa" nil ((:commit . "18d6641bba72cba3c00018cee737ea8b454f64a8") (:authors ("Clément Pit-Claudel, Feng Shu, Lars Andersen" . "expez@expez.com")) (:maintainer "Feng Shu" . "tumashu@163.com") (:keywords "abbrev" "convenience" "matching") (:url . "https://github.com/tumashu/company-posframe")) nil) action package-menu-describe-package) #("20230104.1229" 0 13 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa" 0 5 (font-lock-face package-status-available)) #("Use a posframe as company candidate menu" 0 40 (font-lock-face package-description))]) 59 62 (display (space :align-to 61) tabulated-list-column-name "Status" tabulated-list-id #s(package-desc company-posframe (20230104 1229) "Use a posframe as company candidate menu" ((emacs (26 0)) (company (0 9 0)) (posframe (0 9 0))) single "melpa" nil ((:commit . "18d6641bba72cba3c00018cee737ea8b454f64a8") (:authors ("Clément Pit-Claudel, Feng Shu, Lars Andersen" . "expez@expez.com")) (:maintainer "Feng Shu" . "tumashu@163.com") (:keywords "abbrev" "convenience" "matching") (:url . "https://github.com/tumashu/company-posframe")) nil) tabulated-list-entry [("company-posframe" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc company-posframe (20230104 1229) "Use a posframe as company candidate menu" ((emacs (26 0)) (company (0 9 0)) (posframe (0 9 0))) single "melpa" nil ((:commit . "18d6641bba72cba3c00018cee737ea8b454f64a8") (:authors ("Clément Pit-Claudel, Feng Shu, Lars Andersen" . "expez@expez.com")) (:maintainer "Feng Shu" . "tumashu@163.com") (:keywords "abbrev" "convenience" "matching") (:url . "https://github.com/tumashu/company-posframe")) nil) action package-menu-describe-package) #("20230104.1229" 0 13 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa" 0 5 (font-lock-face package-status-available)) #("Use a posframe as company candidate menu" 0 40 (font-lock-face package-description))]) 62 67 (font-lock-face package-status-available help-echo #("Archive: melpa" 9 14 (font-lock-face package-status-available)) tabulated-list-column-name "Archive" tabulated-list-id #s(package-desc company-posframe (20230104 1229) "Use a posframe as company candidate menu" ((emacs (26 0)) (company (0 9 0)) (posframe (0 9 0))) single "melpa" nil ((:commit . "18d6641bba72cba3c00018cee737ea8b454f64a8") (:authors ("Clément Pit-Claudel, Feng Shu, Lars Andersen" . "expez@expez.com")) (:maintainer "Feng Shu" . "tumashu@163.com") (:keywords "abbrev" "convenience" "matching") (:url . "https://github.com/tumashu/company-posframe")) nil) tabulated-list-entry [("company-posframe" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc company-posframe (20230104 1229) "Use a posframe as company candidate menu" ((emacs (26 0)) (company (0 9 0)) (posframe (0 9 0))) single "melpa" nil ((:commit . "18d6641bba72cba3c00018cee737ea8b454f64a8") (:authors ("Clément Pit-Claudel, Feng Shu, Lars Andersen" . "expez@expez.com")) (:maintainer "Feng Shu" . "tumashu@163.com") (:keywords "abbrev" "convenience" "matching") (:url . "https://github.com/tumashu/company-posframe")) nil) action package-menu-describe-package) #("20230104.1229" 0 13 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa" 0 5 (font-lock-face package-status-available)) #("Use a posframe as company candidate menu" 0 40 (font-lock-face package-description))]) 67 68 (tabulated-list-column-name "Archive" tabulated-list-id #s(package-desc company-posframe (20230104 1229) "Use a posframe as company candidate menu" ((emacs (26 0)) (company (0 9 0)) (posframe (0 9 0))) single "melpa" nil ((:commit . "18d6641bba72cba3c00018cee737ea8b454f64a8") (:authors ("Clément Pit-Claudel, Feng Shu, Lars Andersen" . "expez@expez.com")) (:maintainer "Feng Shu" . "tumashu@163.com") (:keywords "abbrev" "convenience" "matching") (:url . "https://github.com/tumashu/company-posframe")) nil) tabulated-list-entry [("company-posframe" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc company-posframe (20230104 1229) "Use a posframe as company candidate menu" ((emacs (26 0)) (company (0 9 0)) (posframe (0 9 0))) single "melpa" nil ((:commit . "18d6641bba72cba3c00018cee737ea8b454f64a8") (:authors ("Clément Pit-Claudel, Feng Shu, Lars Andersen" . "expez@expez.com")) (:maintainer "Feng Shu" . "tumashu@163.com") (:keywords "abbrev" "convenience" "matching") (:url . "https://github.com/tumashu/company-posframe")) nil) action package-menu-describe-package) #("20230104.1229" 0 13 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa" 0 5 (font-lock-face package-status-available)) #("Use a posframe as company candidate menu" 0 40 (font-lock-face package-description))]) 68 71 (display (space :align-to 70) tabulated-list-column-name "Archive" tabulated-list-id #s(package-desc company-posframe (20230104 1229) "Use a posframe as company candidate menu" ((emacs (26 0)) (company (0 9 0)) (posframe (0 9 0))) single "melpa" nil ((:commit . "18d6641bba72cba3c00018cee737ea8b454f64a8") (:authors ("Clément Pit-Claudel, Feng Shu, Lars Andersen" . "expez@expez.com")) (:maintainer "Feng Shu" . "tumashu@163.com") (:keywords "abbrev" "convenience" "matching") (:url . "https://github.com/tumashu/company-posframe")) nil) tabulated-list-entry [("company-posframe" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc company-posframe (20230104 1229) "Use a posframe as company candidate menu" ((emacs (26 0)) (company (0 9 0)) (posframe (0 9 0))) single "melpa" nil ((:commit . "18d6641bba72cba3c00018cee737ea8b454f64a8") (:authors ("Clément Pit-Claudel, Feng Shu, Lars Andersen" . "expez@expez.com")) (:maintainer "Feng Shu" . "tumashu@163.com") (:keywords "abbrev" "convenience" "matching") (:url . "https://github.com/tumashu/company-posframe")) nil) action package-menu-describe-package) #("20230104.1229" 0 13 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa" 0 5 (font-lock-face package-status-available)) #("Use a posframe as company candidate menu" 0 40 (font-lock-face package-description))]) 71 111 (font-lock-face package-description help-echo #("Description: Use a posframe as company candidate menu" 13 53 (font-lock-face package-description)) tabulated-list-column-name "Description" tabulated-list-id #s(package-desc company-posframe (20230104 1229) "Use a posframe as company candidate menu" ((emacs (26 0)) (company (0 9 0)) (posframe (0 9 0))) single "melpa" nil ((:commit . "18d6641bba72cba3c00018cee737ea8b454f64a8") (:authors ("Clément Pit-Claudel, Feng Shu, Lars Andersen" . "expez@expez.com")) (:maintainer "Feng Shu" . "tumashu@163.com") (:keywords "abbrev" "convenience" "matching") (:url . "https://github.com/tumashu/company-posframe")) nil) tabulated-list-entry [("company-posframe" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc company-posframe (20230104 1229) "Use a posframe as company candidate menu" ((emacs (26 0)) (company (0 9 0)) (posframe (0 9 0))) single "melpa" nil ((:commit . "18d6641bba72cba3c00018cee737ea8b454f64a8") (:authors ("Clément Pit-Claudel, Feng Shu, Lars Andersen" . "expez@expez.com")) (:maintainer "Feng Shu" . "tumashu@163.com") (:keywords "abbrev" "convenience" "matching") (:url . "https://github.com/tumashu/company-posframe")) nil) action package-menu-describe-package) #("20230104.1229" 0 13 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa" 0 5 (font-lock-face package-status-available)) #("Use a posframe as company candidate menu" 0 40 (font-lock-face package-description))]))))
(setq counsel-apropos-history '(#("agenda" 0 6 (ivy-index 306)) "org-agenda-menu" "org-check-agenda-file" #("e -mode" 0 7 (ivy-index 38)) "elisp-byte-code-mode" #("vc dif" 0 6 (ivy-index 16)) "vc-git-diff" #("vc diff" 0 7 (ivy-index 11)) "vc-version-diff" #("swiper-query" 0 12 (ivy-index 0)) "swiper-query-replace" #("diff" 0 4 (ivy-index 108)) "projectile-difference" #("max-lisp-eval-depth" 0 19 (ivy-index 0)) #("vc file info" 0 12 (ivy-index 12)) "vc-bzr-extra-fileinfo" "vc-hg-extra-fileinfo" #("vc history" 0 10 (ivy-index 15)) "vc-default-comment-history" #("git history" 0 11 (ivy-index 6)) "counsel-git-history" "vc-git-history" "vc-git-region-history" #("ivy--go" 0 7 (ivy-index 0)) "lsp-ivy--goto-symbol" #("ivy symbol" 0 10 (ivy-index 5)) "lsp-ivy--goto-symbol" "lsp-ivy--goto-symbol" #("projectile-track-known-projects-automatically" 0 45 (ivy-index 0)) #("last" 0 4 (ivy-index 84)) #("lsp-comm" 0 8 (ivy-index 2)) "lsp-command-map" #("define-key" 0 10 (ivy-index 2)) #("counsel" 0 7 (ivy-index 0)) #("evil-define-key" 0 15 (ivy-index 0)) #("evil-search-mo" 0 14 (ivy-index 0)) "evil-search-module" #("swiper" 0 6 (ivy-index 20217)) #("evil-set-leader" 0 15 (ivy-index 0)) #("leader" 0 6 (ivy-index 1))))
(setq counsel-M-x-history '(#("^" 0 1 (ivy-index 1)) "eval-buffer" #("^term" 0 5 (ivy-index 0)) "term" #("^e" 0 2 (ivy-index 0)) "eval-buffer" #("^ter" 0 4 (ivy-index 0)) "term" #("^quit" 0 5 (ivy-index 0)) "quit-window" "eval-buffer" "eval-buffer" #("^kill-bu" 0 8 (ivy-index 1)) "kill-buffer" #("^d" 0 2 (ivy-index 0)) "dashboard-refresh-buffer" "dashboard-refresh-buffer" "dashboard-refresh-buffer" #("^org-agenda" 0 11 (ivy-index 1)) "org-agenda-list" #("^org-agenda-me" 0 14 (ivy-index 0)) "org-agenda-menu" #("^org-agenda-" 0 12 (ivy-index 4)) "org-agenda-list" "eshell" #("dashboard-refresh-buffer" 0 24 (ivy-index 0)) "eval-buffer" "eval-buffer" #("^dash" 0 5 (ivy-index 0)) "eval-buffer" "eval-buffer" #("^re" 0 3 (ivy-index 0)) "restart-emacs" "eval-buffer" "eval-buffer" "eval-buffer" #("^or" 0 3 (ivy-index 0)) "org-mode" "eval-buffer" #("^go" 0 3 (ivy-index 0)) "go-mode" "eval-buffer" "org-mode" "eval-buffer" "eval-buffer" "eval-buffer" "eval-buffer" "eval-buffer" #("^org" 0 4 (ivy-index 1)) "org-mode" "org-cycle" #("^res" 0 4 (ivy-index 0)) "restart-emacs" #("^ev" 0 3 (ivy-index 0)) "eval-buffer" "go-mode" "org-mode" "org-mode-restart" "eval-buffer" "eval-buffer" #("^org-mode" 0 9 (ivy-index 1)) "org-mode-restart" "org-cycle" #("^org-cy" 0 7 (ivy-index 0)) "org-cycle" "eval-buffer" "eshell" #("^es" 0 3 (ivy-index 0)) "eshell" "restart-emacs" "eval-buffer" "eval-buffer" #("^query-" 0 7 (ivy-index 0)) "query-replace" "eval-buffer" "eval-buffer" #("^replace" 0 8 (ivy-index 0)) "replace-string" "eval-buffer" "eval-buffer" #("swiper-" 0 7 (ivy-index 8)) "swiper-from-isearch" "replace-string" "replace-string" #("^rep" 0 4 (ivy-index 3)) "replace-string" #("^eva" 0 4 (ivy-index 0)) "eval-buffer" #("^vc-annotate" 0 12 (ivy-index 0)) "vc-annotate" "restart-emacs" "go-mode" "go-mode" #("^lsp" 0 4 (ivy-index 1)) "lsp" #("^lsp-re" 0 7 (ivy-index 0)) "lsp-restart-workspace" "go-mode" "go-mode" "go-mode"))
(setq ivy-history '(#("lisp_init.el" 0 12 (ivy-index 1)) #("lisp" 0 4 (ivy-index 0)) #("esh" 0 3 (ivy-index 0)) "*eshell*" #("note.org" 0 8 (ivy-index 2)) #(".go" 0 3 (ivy-index 2)) "notify.go" #("note.md" 0 7 (ivy-index 1)) #("note" 0 4 (ivy-index 1)) #("mycard_handler.go" 0 17 (ivy-index 1)) #("key" 0 3 (ivy-index 0)) "keymap.el" "keymap.el" #("dash" 0 4 (ivy-index 0)) "*dashboard*" #("paypal_hand" 0 11 (ivy-index 3)) "src/payment/payservice/handler/paypal_handler.go" "paypal_handler.go" #("da" 0 2 (ivy-index 0)) "*dashboard*" "*dashboard*" #("bookmarks" 0 9 (face ivy-virtual ivy-index 20)) #(".zshrc" 0 6 (ivy-index 1)) #("*eshell*" 0 8 (ivy-index 1)) #("e" 0 1 (ivy-index 0)) "ed" "*dashboard*" #("~/.emacs.d/" 0 11 (ivy-index 0)) "*dashboard*" #("c" 0 1 (ivy-index 0)) "*Customize Apropos*" "*dashboard*" "*dashboard*" "*dashboard*" "keymap.el" #("lisp_" 0 5 (ivy-index 1)) "lisp/lisp_init.el" "keymap.el" #("or" 0 2 (ivy-index 0)) "keymap.el" #("http_handler.go" 0 15 (face ivy-virtual ivy-index 6)) "keymap.el" #("paypal_handler.go" 0 17 (ivy-index 2)) #("keymap.el" 0 9 (ivy-index 1)) #("no" 0 2 (ivy-index 0)) "*dashboard*" #("ke" 0 2 (ivy-index 0)) #("tmp" 0 3 (ivy-index 2)) "lisp/keymap.el" #("das" 0 3 (ivy-index 0)) "*dashboard*" #("probation_controller.go" 0 23 (ivy-index 1)) #("go.mod" 0 6 (ivy-index 1)) #("lsp" 0 3 (ivy-index 0)) "*lsp-log*" "*lsp-log*" "*lsp-log*" #("ls" 0 2 (ivy-index 0)) "*lsp-log*" #("src/probation/admin/controller/.probation_controller.go.~undo-tree~" 0 67 (ivy-index 0)) #("~/code/company/server/" 0 22 (ivy-index 5)) "*dashboard*" "*lsp-log*" #("~/code/company/miya/server" 0 26 (ivy-index 0)) #("~/Library/Mobile Documents/com~apple~CloudDocs/note/doc" 0 55 (ivy-index 1)) #("~/code/company/protocol" 0 23 (ivy-index 0)) #("~/code/company/paytest" 0 22 (ivy-index 0)) #("~/.emacs.d" 0 10 (ivy-index 0)) #("~/code/company/paymentsdk" 0 25 (ivy-index 1)) #("~/code/company/probation" 0 24 (ivy-index 0)) #("logic.go" 0 8 (ivy-index 0)) "src/probation/admin/logic/logic.go" #("probation_con" 0 13 (ivy-index 1)) "src/probation/admin/controller/probation_controller.go" #("pro" 0 3 (ivy-index 0)) #("~/code/company/probation/" 0 25 (ivy-index 3)) #("pb/payservice.mid.proto" 0 23 (ivy-index 6)) #("~/code/company/protocol/" 0 24 (ivy-index 0)) #("logic_inside.go" 0 15 (ivy-index 0)) #("paypal_" 0 7 (ivy-index 2)) "src/payment/payservice/handler/paypal_handler.go" "*dashboard*" #("logic" 0 5 (ivy-index 3)) "src/probation/admin/logic/logic_inside.go" #("probation" 0 9 (ivy-index 1)) #("probation_" 0 10 (ivy-index 0)) "src/probation/admin/controller/probation_controller.go" "src/probation/admin/controller/probation_controller.go" #("mycard_" 0 7 (ivy-index 1)) "src/payment/payservice/handler/mycard_handler.go" #("ini" 0 3 (ivy-index 0)) #("i" 0 1 (ivy-index 5)) "*dashboard*" #("~/code/company/miya/server/" 0 27 (ivy-index 0)) #("git.md" 0 6 (ivy-index 2)) #("pay" 0 3 (ivy-index 0)) #("*terminal*" 0 10 (ivy-index 1)) #(".gitignore" 0 10 (ivy-index 1))))
(setq shell-command-history '("/bin/zsh"))
(setq evil-ex-history '(#("org-agenda-quit" 0 1 (line-prefix #(":" 0 1 (font-lock-face minibuffer-prompt)) ex-index 9) 1 2 (line-prefix #(":" 0 1 (font-lock-face minibuffer-prompt)) ex-index 10) 2 3 (line-prefix #(":" 0 1 (font-lock-face minibuffer-prompt)) ex-index 11) 3 4 (line-prefix #(":" 0 1 (font-lock-face minibuffer-prompt)) ex-index 12) 4 5 (line-prefix #(":" 0 1 (font-lock-face minibuffer-prompt)) ex-index 13) 5 6 (line-prefix #(":" 0 1 (font-lock-face minibuffer-prompt)) ex-index 14) 6 7 (line-prefix #(":" 0 1 (font-lock-face minibuffer-prompt)) ex-index 15) 7 8 (line-prefix #(":" 0 1 (font-lock-face minibuffer-prompt)) ex-index 16) 8 9 (line-prefix #(":" 0 1 (font-lock-face minibuffer-prompt)) ex-index 17) 9 10 (line-prefix #(":" 0 1 (font-lock-face minibuffer-prompt)) ex-index 18) 10 11 (line-prefix #(":" 0 1 (font-lock-face minibuffer-prompt)) ex-index 19) 11 12 (line-prefix #(":" 0 1 (font-lock-face minibuffer-prompt)) ex-index 20) 12 13 (line-prefix #(":" 0 1 (font-lock-face minibuffer-prompt)) ex-index 21) 13 14 (line-prefix #(":" 0 1 (font-lock-face minibuffer-prompt)) ex-index 22) 14 15 (line-prefix #(":" 0 1 (font-lock-face minibuffer-prompt)) ex-index 23)) #("exit" 0 1 (line-prefix #(":" 0 1 (font-lock-face minibuffer-prompt)) ex-index 9) 1 2 (line-prefix #(":" 0 1 (font-lock-face minibuffer-prompt)) ex-index 10) 2 3 (line-prefix #(":" 0 1 (font-lock-face minibuffer-prompt)) ex-index 11) 3 4 (line-prefix #(":" 0 1 (font-lock-face minibuffer-prompt)) ex-index 12)) #("q" 0 1 (ex-index 1)) #("quit-windows-on" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15)) #("restart-emacs" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13)) #("w" 0 1 (ex-index 1)) #("restart-emacs" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("restart-emacs" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13)) #("w" 0 1 (ex-index 1)) #("restart-emacs" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13)) #("w" 0 1 (ex-index 1)) #("restart-emacs" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13)) #("w" 0 1 (ex-index 1)) #("restart-emacs" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13)) #("w" 0 1 (ex-index 1)) #("eval-buffer" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("w" 0 1 (ex-index 1)) #("eval-buffer" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("w" 0 1 (ex-index 1)) #("eval-buffer" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("w" 0 1 (ex-index 1)) #("eval-buffer" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("w" 0 1 (ex-index 1)) #("eval-buffer" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("w" 0 1 (ex-index 1)) #("eval-buffer" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("w" 0 1 (ex-index 1)) #("eval-buffer" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("w" 0 1 (ex-index 1)) #("eval-buffer" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("w" 0 1 (ex-index 1)) #("eval-buffer" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("w" 0 1 (ex-index 1)) #("eval-buffer" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("w" 0 1 (ex-index 1)) #("eval-buffer" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("w" 0 1 (ex-index 1)) #("restart-emacs" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13)) #("w" 0 1 (ex-index 1)) #("eval-buffer" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("w" 0 1 (ex-index 1)) #("eval-buffer" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("w" 0 1 (ex-index 1)) #("scroll-dwon" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("scroll-up" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("scroll-down" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("w" 0 1 (ex-index 1)) #("eval-buffer" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("w" 0 1 (ex-index 1)) #("markdown-preview" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16)) #("restart-emacs" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13)) #("term" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) #("restart-emacs" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13)) #("term" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) #("w" 0 1 (ex-index 1)) #("package-install markdown-mode" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29)) #("restart-emacs" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13)) #("eval-buffer" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("w" 0 1 (ex-index 1)) #("restart-emacs" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13)) #("restart" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7)) #("eval-buffer" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("w" 0 1 (ex-index 1)) #("package-list-packages" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21)) #("w" 0 1 (ex-index 1)) #("restart-emacs" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13)) #("eval-buffer " 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12)) #("eval-buffer" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("w" 0 1 (ex-index 1)) #("eval-buffer" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("w" 0 1 (ex-index 1)) #("eval-buffer" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("w" 0 1 (ex-index 1)) #("eval-buffer" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("w" 0 1 (ex-index 1)) #("eval-buffer" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("w" 0 1 (ex-index 1)) #("eval-buffer" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("w" 0 1 (ex-index 1)) #("eval-buffer" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("w" 0 1 (ex-index 1)) #("eval-buffer" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("w" 0 1 (ex-index 1)) #("eval-buffer" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("w" 0 1 (ex-index 1)) #("restart-emacs" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13)) #("eval-buffer" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("w" 0 1 (ex-index 1)) #("restart-emacs" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13)) #("log-view-mode" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13)) #("lsp" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("log-view-mode" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13)) #("eval-buffer" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("which-key-mode" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14)) #("restart-emacs" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13)) #("eval-buffer" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("w" 0 1 (ex-index 1)) #("eval-buffer" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("w" 0 1 (ex-index 1)) #("eval-buffer" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11)) #("w" 0 1 (ex-index 1))))
(setq search-ring '(#("test" 0 4 (isearch-case-fold-search nil isearch-regexp-function nil)) #(":" 0 1 (isearch-regexp-function nil isearch-case-fold-search t)) #("bash-ls" 0 7 (isearch-regexp-function nil isearch-case-fold-search t)) #("sh-mode" 0 7 (isearch-regexp-function nil isearch-case-fold-search t)) #("bash" 0 4 (isearch-regexp-function nil isearch-case-fold-search t)) #("sh-mod" 0 6 (isearch-regexp-function nil isearch-case-fold-search t)) #("go" 0 2 (isearch-regexp-function nil isearch-case-fold-search t)) #("golang" 0 6 (isearch-regexp-function nil isearch-case-fold-search t)) #("ace-window/" 0 11 (isearch-regexp-function nil isearch-case-fold-search t)) #("goto-ch$" 0 8 (isearch-regexp-function nil isearch-case-fold-search t)) #("goto-chg" 0 8 (isearch-regexp-function nil isearch-case-fold-search t)) #("undo-fu" 0 7 (isearch-regexp-function nil isearch-case-fold-search t))))
(setq buffer-name-history '(#("CAPTURE-.notes" 0 14 (ivy-index 0)) #("main.go" 0 7 (ivy-index 0)) #("*Customize Apropos*" 0 19 (ivy-index 0)) #("*Customize Group: LSP Modeline*" 0 31 (ivy-index 0)) "init.el" "*dashboard*" "*ansi-term*" "*dashboard*" "*terminal*" "init.el" "4" "init.el" "hello.el" "*lsp-log*" ".zshrc" "init.el" ".zshrc" "q" "init.el" "5" "*scratch*"))
(setq bookmark-history '("test-go" #("test-go" 0 7 (ivy-index 2)) #("paypal" 0 6 (ivy-index 1)) #("wechat note demo" 0 16 (ivy-index 0)) ".zshrc" ".zshrc" ".zshrc" #(".zshrc" 0 6 (ivy-index 0)) #("1" 0 1 (ivy-index 0)) "" "" "yes" "lisp_init.el" #("lisp_init.el" 0 12 (ivy-index 0)) #("yes" 0 3 (ivy-index 0)) "a" "b" "a"))
(setq minibuffer-history '("fuck" "ackk" "/bin/zsh" "term" "neotree" "evil-jump" "jump-backward" "back" "lsp-find" "lsp-fid" "b" "a" ".zshrc" "b" "a"))
(setq command-history '((eval-buffer) (term "/bin/zsh") (eval-buffer) (term "/bin/zsh") (evil-yank 85 100 'line nil nil) (dired "/Users/keeyu/note/org/.note.org.~undo-tree~" nil) (quit-window nil) (evil-record-macro 107) (evil-replace 155 156 'exclusive 54) (evil-replace 136 137 'exclusive 53) (evil-replace 136 137 'exclusive 114) (evil-replace 124 125 'exclusive 52) (evil-replace 124 125 'exclusive 51) (evil-replace 124 125 'exclusive 53) (evil-replace 124 125 'exclusive 51) (evil-replace 106 107 'exclusive 51) (evil-yank 88 106 'line nil nil) (evil-yank 137 156 'line nil nil) (evil-replace 137 138 'exclusive 53) (evil-yank 118 136 'line nil nil) (evil-replace 118 119 'exclusive 52) (evil-yank 106 117 'line nil nil) (evil-delete 1773 1794 'line nil nil) (evil-find-char nil 101) (kill-buffer "CAPTURE-.notes") (evil-record-macro 113) (evil-record-macro 113) (eval-buffer) (evil-yank 2502 2578 'line nil nil) (evil-yank 2420 2433 'line nil nil) (xref-find-definitions "(*mycardHandler).HandleNotify") (eval-buffer) (evil-replace 2015 2016 'exclusive 107) (evil-yank 1888 1966 'line nil nil) (evil-yank 1945 1946 'exclusive nil nil) (kill-buffer "main.go") (dashboard-refresh-buffer) (bookmark-delete "paypal") (dashboard-refresh-buffer) (xref-find-definitions "(*mycardHandler).PlaceOrder") (dashboard-refresh-buffer) (evil-record-macro 58) (evil-record-macro 113) (evil-delete 68 86 'line nil nil) (evil-yank 50 68 'line nil nil) (evil-yank 28 50 'line nil nil) (evil-yank 9 28 'line nil nil) (org-agenda-list nil) (evil-delete 9 18 'line nil nil) (evil-delete 18 37 'line nil nil) (evil-record-macro 107) (evil-record-macro 101) (evil-record-macro 58) (org-agenda-list nil) (evil-yank 689 705 'line nil nil) (eshell nil) (evil-delete 344 361 'line nil nil) (evil-yank 344 361 'line nil nil) (dashboard-refresh-buffer) (dashboard-refresh-buffer) (evil-delete 871 890 'line nil nil) (kill-buffer "*Customize Apropos*") (kill-buffer "*Customize Group: LSP Modeline*") (dashboard-refresh-buffer) (eval-buffer) (dashboard-refresh-buffer) (dashboard-refresh-buffer) (eval-buffer) (dashboard-refresh-buffer) (eval-buffer) (eval-buffer) (describe-key '(("d" . [24 100]))) (evil-replace 708 709 'exclusive 100) (evil-yank 585 659 'line nil nil) (evil-delete 2139 2207 'line nil nil) (dired "/Users/keeyu/note/org/" nil) (evil-yank 9 17 'line nil nil) (describe-key '(("" . [3 16]))) (describe-key '(("c" . [99]))) (restart-emacs nil) (evil-delete 330 331 'line nil nil) (evil-delete 330 331 'line nil nil) (eval-buffer) (eval-buffer) (eval-buffer) (evil-delete 330 341 'line nil nil) (evil-delete 399 466 'line nil nil) (evil-delete 399 420 'line nil nil) (evil-delete 399 424 'line nil nil) (evil-delete 341 447 'line nil nil) (org-mode) (eval-buffer) (evil-yank 561 614 'line nil nil) (describe-key '(("" . [29]))) (describe-key '(("	" . [tab]))) (go-mode) (eval-buffer) (org-mode) (eval-buffer) (eval-buffer)))
(setq file-name-history '(#("/Users/keeyu/note/org/.note.org.~undo-tree~" 0 43 (ivy-index 0)) #("/Users/keeyu/note/note.md" 0 25 (ivy-index 1)) #("/Users/keeyu/note/org/" 0 22 (ivy-index 0)) #("/Users/keeyu/note/org/note.org" 0 30 (ivy-index 2)) #("/Users/keeyu/.emacs.d/lisp/tmp2" 0 31 (ivy-index 0)) #("/Users/keeyu/.emacs.d/lisp/tmp" 0 30 (ivy-index 0)) #("/Users/keeyu/code/company/probation/src/probation/admin/controller/" 0 67 (ivy-index 3)) #("/Users/keeyu/code/company/probation/src/probation/admin/" 0 56 (ivy-index 2)) #("/Users/keeyu/code/company/probation/" 0 36 (ivy-index 0)) #("/Users/keeyu/code/self/probation/probation/admin/main.go" 0 56 (ivy-index 1)) "~/code/company/probation/src/admin/main.go" "~/code/company/probation/src/admin" "~/code/company/server/src/payment" "~/code/company/probation/src/probation/admin" "~/code/company/probation/src" "~/code/self/probation/probation/admin" "~/code/self/admin" #("/Users/keeyu/code/company/probation/src/probation/admin/main.go" 0 63 (ivy-index 0)) #("/Users/keeyu/code/company/probation/src/probation/admin/controller/probation_controller.go" 0 90 (ivy-index 1)) #("/Users/keeyu/code/company/probation/src/probation/go.mod" 0 56 (ivy-index 4)) #("/Users/keeyu/code/company/paymentsdk/api.go" 0 43 (ivy-index 0)) #("/Users/keeyu/code/company/paymentsdk/" 0 37 (ivy-index 0)) #("/Users/keeyu/code/company/paytest/" 0 34 (ivy-index 1)) #("/Users/keeyu/code/company/paytest/go.mod" 0 40 (ivy-index 1)) #("/Users/keeyu/code/company/protocol/" 0 35 (ivy-index 4)) #("/Users/keeyu/code/company/probation/README.md" 0 45 (ivy-index 11)) #("/Users/keeyu/code/company/miya/" 0 31 (ivy-index 0)) #("/Users/keeyu/note/git.md" 0 24 (ivy-index 0)) #("/Users/keeyu/.emacs.d/.gitignore" 0 32 (ivy-index 1)) #("/Users/keeyu/code/self/tool/" 0 28 (ivy-index 1)) #("/Users/keeyu/code/company/server/src/payment/payservice/handler/paypal_handler.go" 0 81 (ivy-index 2)) #("/Users/keeyu/code/company/server/build_tar.sh" 0 45 (ivy-index 15)) #("/Users/keeyu/code/self/tool/my_video/" 0 37 (ivy-index 0)) #("/Users/keeyu/note/rust.md" 0 25 (ivy-index 0)) #("/Users/keeyu/.zshrc" 0 19 (ivy-index 3)) #("/Users/keeyu/.emacs.d/.zshrc" 0 28 (ivy-index 0)) #("/Users/keeyu/code/self/redis-xread/main.go" 0 42 (ivy-index 4)) #("/Users/keeyu/note/redis.md" 0 26 (ivy-index 0)) #("/Users/keeyu/code/self/test-go/" 0 31 (ivy-index 0)) #("/Users/keeyu/code/company/server/src/payment/payservice/main.go" 0 63 (ivy-index 1)) #("/Users/keeyu/code/company/" 0 26 (ivy-index 0)) #("/Users/keeyu/" 0 13 (ivy-index 0)) "~/.emacs.d/lisp/lisp_init.el" #("/Users/keeyu/.emacs.d/lisp/lsp.el" 0 33 (ivy-index 0)) #("/Users/keeyu/code/self/cross-build-rust/src/" 0 44 (ivy-index 3)) #("/" 0 1 (ivy-index 0)) #("/Users/keeyu/.emacs.d/" 0 22 (ivy-index 1)) #("/Users/keeyu/.emacs.d/lisp/hello.el" 0 35 (ivy-index 4)) #("/Users/keeyu/.emacs.d/lisp/" 0 27 (ivy-index 0)) "~/code/self/test-go/" "TAGS" "~/.zshrc" "~/.alacritty.yml" "~/.emacs.d/init.el" "~/code/self/test-go" "~/.emacs.d/lisp/lisp_init.el" "~/.emacs.d/init.el" "~/.emacs.d/lisp/lisp_init.el" "~/code/self/test-go" "~/code/self/go-test" "~/.zshrc" "~/code/self/go-test/main.go" "~/code/self/go-test/" "~/code/self/go-test/5" "~/code/self/go-test/main.go" "~/code/self/go-test" "~/code/company/server/src/payment/payservice/main.go" "~/.emacs.d/lisp/lisp_init.el" "~/code/company/server/src/payment/payservice/main.go" "~/.emacs.d/lisp/lisp_init.el" "~/code/company/server/src/payment/payservice/main.go" "~/code/company/server/src/payment/payservice/" "~/.zshrc" "~/.emacs.d/lisp/lisp_init.el" "~/.zshrc" "~/.emacs.d/lisp/lisp_init.el" "~/.emacs.d/init.el" "~/.zshrc" "~/.emacs.d/init.el" "~/.zshrc" "~/.emacs.d/lisp/lisp_init.el" "~/.zshrc" "~/.emacs.d/init.el"))
(setq extended-command-history '("restart-emacs" "term" "normal-mode" "restart-emacs" "eval-buffer" "quit-window" "restart-emacs" "normal-erase-is-backspace-mode" "restart-emacs" "lsp" "go-mode" "fundamental-mode" "lsp" "normal-mode" "go-mode" "lsp-find-definition" "restart-emacs" "goto-last-change" "restart-emacs" "package-list-packages" "undo-fu-only-redo" "undo-fu-only-undo" "undo-fu-only-redo" "undo-fu-only-undo" "restart-emacs" "undo-fu-only-undo" "undo-fu-only-redo" "restart-emacs" "package-list-packages" "hello-world" "restart-emacs" "package-list-packages-no-fetch" "restart-emacs" "package-list-packages" "hello-world" "eval-buffer" "hello-world" "eval-buffer" "hello-world" "package-list-packages"))
(setq goto-line-history '("100" "2"))
(setq yes-or-no-p-history '("yes" "es" "yes" "no" "yes" "no" "yes" "ues" "yes"))
(setq projectile-project-command-history '#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ()))
(setq evil-jumps-history '((1793 "/Users/keeyu/note/note.md") (1797 "/Users/keeyu/note/note.md") (60 "/Users/keeyu/note/org/note.org") (659 "/Users/keeyu/.emacs.d/bookmarks") (1869 "/Users/keeyu/note/note.md") (141 "/Users/keeyu/.zshrc") (60 "/Users/keeyu/note/org/note.org") (19 "/Users/keeyu/.zshrc") (684 "/Users/keeyu/.zshrc") (671 "/Users/keeyu/.zshrc") (99 "/Users/keeyu/.emacs.d/projectile-bookmarks.eld") (1624 "/Users/keeyu/.emacs.d/lisp/lisp_init.el") (1148 "/Users/keeyu/.emacs.d/elpa/lsp-mode-20230203.924/lsp-modeline.el") (1461 "/Users/keeyu/.emacs.d/lisp/lisp_init.el") (1460 "/Users/keeyu/.emacs.d/lisp/lisp_init.el") (1624 "/Users/keeyu/.emacs.d/lisp/lisp_init.el") (1 "/Users/keeyu/.emacs.d/lisp/lisp_init.el") (717 "/Users/keeyu/.emacs.d/lisp/keymap.el") (1414 "/Users/keeyu/.emacs.d/lisp/keymap.el") (1820 "/Users/keeyu/.emacs.d/lisp/keymap.el") (33 "/Users/keeyu/note/org/note.org") (3331 "/Users/keeyu/.emacs.d/lisp/lisp_init.el") (1 "/Users/keeyu/.emacs.d/lisp/lisp_init.el") (2131 "/Users/keeyu/.emacs.d/lisp/keymap.el") (24 "/Users/keeyu/note/org/note.org") (99 "/Users/keeyu/note/org/note.org") (964 "/Users/keeyu/.emacs.d/lisp/keymap.el") (9 "/Users/keeyu/note/org/note.org") (471 "/Users/keeyu/code/company/server/src/payment/payservice/handler/http_handler.go") (327 "/Users/keeyu/code/company/server/src/payment/payservice/handler/http_handler.go") (471 "/Users/keeyu/code/company/server/src/payment/payservice/handler/http_handler.go") (406 "/Users/keeyu/code/company/server/src/payment/payservice/handler/http_handler.go") (409 "/Users/keeyu/code/company/server/src/payment/payservice/handler/http_handler.go") (50 "/Users/keeyu/code/company/server/src/payment/payservice/handler/http_handler.go") (29 "/Users/keeyu/note/org/note.org") (679 "/Users/keeyu/code/company/server/src/payment/payservice/handler/paypal_handler.go") (525 "/Users/keeyu/code/company/server/src/payment/payservice/handler/http_handler.go") (679 "/Users/keeyu/code/company/server/src/payment/payservice/handler/paypal_handler.go") (330 "/Users/keeyu/.emacs.d/lisp/keymap.el") (29 "/Users/keeyu/note/org/note.org") (330 "/Users/keeyu/.emacs.d/lisp/keymap.el") (29 "/Users/keeyu/note/org/note.org") (830 "/Users/keeyu/code/company/server/src/payment/payservice/handler/paypal_handler.go") (2660 "/Users/keeyu/code/company/server/src/payment/payservice/model/paypal_clients.go") (830 "/Users/keeyu/code/company/server/src/payment/payservice/handler/paypal_handler.go") (525 "/Users/keeyu/code/company/server/src/payment/payservice/handler/http_handler.go") (679 "/Users/keeyu/code/company/server/src/payment/payservice/handler/paypal_handler.go") (29 "/Users/keeyu/note/org/note.org") (330 "/Users/keeyu/.emacs.d/lisp/keymap.el") (679 "/Users/keeyu/code/company/server/src/payment/payservice/handler/paypal_handler.go") (9 "/Users/keeyu/note/org/note.org") (1 "/Users/keeyu/note/org/note.org") (17 "/Users/keeyu/note/org/note.org") (681 "/Users/keeyu/code/company/server/src/payment/payservice/handler/paypal_handler.go") (525 "/Users/keeyu/code/company/server/src/payment/payservice/handler/http_handler.go") (681 "/Users/keeyu/code/company/server/src/payment/payservice/handler/paypal_handler.go") (525 "/Users/keeyu/code/company/server/src/payment/payservice/handler/http_handler.go") (681 "/Users/keeyu/code/company/server/src/payment/payservice/handler/paypal_handler.go") (330 "/Users/keeyu/.emacs.d/lisp/keymap.el") (151 "/Users/keeyu/code/company/server/src/payment/payservice/handler/paypal_handler.go") (525 "/Users/keeyu/code/company/server/src/payment/payservice/handler/http_handler.go") (727 "/Users/keeyu/code/company/server/src/payment/payservice/handler/paypal_handler.go") (525 "/Users/keeyu/code/company/server/src/payment/payservice/handler/http_handler.go") (665 "/Users/keeyu/code/company/server/src/payment/payservice/handler/paypal_handler.go") (330 "/Users/keeyu/.emacs.d/lisp/keymap.el") (17 "/Users/keeyu/note/org/note.org") (330 "/Users/keeyu/.emacs.d/lisp/keymap.el") (64 "/Users/keeyu/code/company/server/src/payment/payservice/handler/paypal_handler.go") (330 "/Users/keeyu/.emacs.d/lisp/keymap.el") (17 "/Users/keeyu/note/org/note.org") (1 "/Users/keeyu/note/org/note.org") (330 "/Users/keeyu/.emacs.d/lisp/keymap.el") (1483 "/Users/keeyu/.emacs.d/lisp/keymap.el") (1 "/Users/keeyu/note/org/note.org") (17 "/Users/keeyu/note/org/note.org") (1483 "/Users/keeyu/.emacs.d/lisp/keymap.el") (330 "/Users/keeyu/.emacs.d/lisp/keymap.el") (17 "/Users/keeyu/note/org/note.org") (64 "/Users/keeyu/code/company/server/src/payment/payservice/handler/paypal_handler.go") (2989 "/Users/keeyu/code/company/server/src/payment/payservice/handler/paypal_handler.go") (370 "/Users/keeyu/.emacs.d/lisp/keymap.el") (2842 "/Users/keeyu/code/company/server/src/payment/payservice/handler/paypal_handler.go") (550 "/Users/keeyu/code/company/server/src/payment/payservice/model/pay_order_raw_datas.go") (2842 "/Users/keeyu/code/company/server/src/payment/payservice/handler/paypal_handler.go") (42 "/Users/keeyu/note/org/note.org") (526 "/Users/keeyu/.emacs.d/lisp/keymap.el") (34 "/Users/keeyu/note/org/note.org") (328 "/Users/keeyu/.emacs.d/lisp/keymap.el") (14 "/Users/keeyu/note/org/note.org") (340 "/Users/keeyu/.emacs.d/lisp/keymap.el") (14 "/Users/keeyu/note/org/note.org") (27 "/Users/keeyu/note/org/note.org") (329 "/Users/keeyu/.emacs.d/lisp/keymap.el") (42 "/Users/keeyu/note/org/note.org") (15 "/Users/keeyu/note/org/note.org") (2844 "/Users/keeyu/code/company/server/src/payment/payservice/handler/paypal_handler.go") (1931 "/Users/keeyu/.zshrc") (248 "/Users/keeyu/.zshrc") (2757 "/Users/keeyu/code/company/probation/src/probation/admin/controller/probation_controller.go") (246 "/Users/keeyu/code/company/probation/src/xutil/https/response.go")))
