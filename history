;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(command-history org-tags-history org-link--history org-read-date-history input-method-history read-char-history Info-search-history xref--read-identifier-history counsel-flycheck-errors-history sql-user-history counsel-ibuffer-history counsel-grep-history compile-history bookmark-history query-replace-history buffer-name-history read-number-history imenu--history-list counsel-git-grep-history shell-command-history goto-line-history coding-system-history read-expression-history tmm--history empty-history woman-topic-history evil-ex-history yes-or-no-p-history ivy-history swiper-history counsel-M-x-history file-name-history minibuffer-history extended-command-history))
(setq command-history '((evil-delete 676 679 'line nil nil) (evil-delete 113 150 'line nil nil) (evil-delete 68 68 'exclusive nil nil) (evil-delete 69 69 'line nil nil) (evil-delete 70 70 'line nil nil) (evil-delete 71 71 'line nil nil) (evil-delete 71 73 'line nil nil) (evil-delete 71 76 'line nil nil) (evil-delete 71 84 'line nil nil) (lsp-bridge-restart-process) (evil-record-macro 107) (vterm nil) (evil-delete 37 38 'line nil nil) (evil-delete 38 39 'line nil nil) (evil-delete 38 39 'line nil nil) (evil-delete 38 39 'line nil nil) (evil-delete 38 39 'line nil nil) (evil-delete 38 39 'line nil nil) (evil-delete 38 39 'line nil nil) (vterm nil) (evil-record-macro 24) (goto-line 6000 nil) (list-packages nil)))
(setq org-read-date-history '("    " "        "))
(setq counsel-ibuffer-history '(#("dash" 0 4 (ivy-index 0)) #(" *%  *vterm*                 1752 VTerm            (vterm run)" 0 62 (idx 1 ivy-index 1)) #("ter" 0 3 (ivy-index 0)) " *   main.go                 1336 Go               ~/code/self/new-tool/watermark/main.go" #(" *   init.el                 2821 ELisp/d          ~/.emacs.d/init.el" 0 69 (ivy-index 2 idx 2)) #("     search.go              13619 Go               ~/code/company/probation/src/probation/admin/logic/search.go" 0 111 (ivy-index 1 idx 1)) #(" *%  *vterm*                 9567 VTerm            (vterm run)" 0 62 (ivy-index 3 idx 3)) #(" *   logic_inside.go        36787 Go               ~/code/company/probation/src/probation/admin/logic/logic_inside.go" 0 117 (ivy-index 1 idx 1)) #("v" 0 1 (ivy-index 0)) " *%  *vterm*                 7012 VTerm            (vterm run)" " *%  *vterm*                 6285 VTerm            (vterm run)" #("     logic_inside.go        36693 Go               ~/code/company/probation/src/probation/admin/logic/logic_inside.go" 0 117 (ivy-index 1 idx 1)) #("     logic_inside.go        36603 Go               ~/code/company/probation/src/probation/admin/logic/logic_inside.go" 0 117 (ivy-index 1 idx 1)) " *%  *vterm*                 4831 VTerm            (vterm run)" " *%  *vterm*                 4104 VTerm            (vterm run)" #("proba" 0 5 (ivy-index 4)) "     probation.go           10403 Go               ~/code/company/probation/src/probation/admin/model/probation.go" #(" *%  *vterm*                 3377 VTerm            (vterm run)" 0 62 (ivy-index 1 idx 1)) #("     logic_inside.go        36500 Go               ~/code/company/probation/src/probation/admin/logic/logic_inside.go" 0 117 (ivy-index 1 idx 1)) #(" *%  *vterm*                 2650 VTerm            (vterm run)" 0 62 (ivy-index 1 idx 1)) #("     logic_inside.go        36494 Go               ~/code/company/probation/src/probation/admin/logic/logic_inside.go" 0 117 (ivy-index 1 idx 1)) #(" *%  *vterm*                 1928 VTerm            (vterm run)" 0 62 (ivy-index 3 idx 3)) " *%  *vterm*                  937 VTerm            (vterm run)" #(" *   probation_contr...     26791 Go               ~/code/company/probation/src/probation/admin/controller/probation_controller.go" 0 130 (ivy-index 2 idx 2)) #("     logic_inside.go        36489 Go               ~/code/company/probation/src/probation/admin/logic/logic_inside.go" 0 117 (ivy-index 1 idx 1)) #("lsp" 0 3 (ivy-index 0)) " *   *lsp-bridge*           33485 Fundamental      (*lsp-bridge* run)" #("     main.go                 1194 Go               ~/code/company/probation/src/probation/admin/main.go" 0 103 (idx 1 ivy-index 1)) " *%  *dashboard*              781 Dashboard        " #(" *%  *vterm*                 7240 VTerm            (vterm run)" 0 62 (idx 1 ivy-index 1)) #("     lisp.el                 3247 ELisp/d          ~/.emacs.d/lisp/lisp.el" 0 74 (idx 1 ivy-index 1)) #("     lisp.el                 3176 ELisp/d          ~/.emacs.d/lisp/lisp.el" 0 74 (ivy-index 1 idx 1))))
(setq bookmark-history '("encode" #("encode" 0 6 (ivy-index 0)) #("apply" 0 5 (ivy-index 0)) #("yes" 0 3 (ivy-index 0))))
(setq query-replace-history '("yes" "evil"))
(setq buffer-name-history '(#("*Clippy*" 0 8 (ivy-index 0)) #("*terminal*" 0 10 (ivy-index 0)) #("*shell*" 0 7 (ivy-index 0)) #("*Help*" 0 6 (ivy-index 0)) #("*Packages*" 0 10 (ivy-index 0))))
(setq read-number-history '("7"))
(setq imenu--history-list '(#("查看端口被占用" 0 7 (idx 4 ivy-index 5))))
(setq counsel-git-grep-history '(#("mongo" 0 5 (ivy-index 0)) "tool/mongo.md:5:--name mongodb \\" #("restart" 0 7 (ivy-index 2)) "tool/nas.md:11:  --restart unless-stopped \\" #("rest" 0 4 (ivy-index 0)) "tool/docker.md:5:-p 0.0.0.0:3306:3306 --restart always -d mysql" #("getsts" 0 6 (ivy-index 0)) "src/ures/cache/sts_token.go:17:func GetStsToken(appID int, playerId int64, uploadType ures_pb.UploadType) (*ures_pb.StsToken, error) {" #("OssClients" 0 10 (ivy-index 3)) "src/ures/common/oss.go:22:	OssClients   map[int]*ossClient" #("PrivateBucket" 0 13 (ivy-index 3)) "src/ures/handler/res_ext_obj.go:166:		bucket = appCfg.Oss.PrivateBucket" "src/ures/config/config.go:42:		PrivateBucket   string `json:\"private_bucket\"`" #("getfileinfo" 0 11 (ivy-index 0)) "src/ures/handler/res_int_obj.go:107:	fileInfo, err := FileHandler.GetFileInfo(appID, playerId, req.UploadType)" #("UploadType_CertifyImg" 0 21 (ivy-index 1)) "src/ures/protocol/ures_pb/ures.ext.pb.go:164:	UploadType_CertifyImg                                UploadType = 38" #("stsgettoken" 0 11 (ivy-index 0)) "src/ures/handler/res_ext_obj.go:30:func (r *ResExtObj) StsGetToken(ctx context.Context, req *ures_pb.StsGetTokenReq) (*ures_pb.StsGetTokenRes, error) {" #("testbuf" 0 7 (ivy-index 0)) "src/ures/ucrypto/crypto_test.go:30:func TestBuffer(t *testing.T) {" #("encode key" 0 10 (ivy-index 1)) "jiami_v3/ucrypto/ucrypto.go:75:	fmt.Println(\"encode key: \", h.A)" #("decode key" 0 10 (ivy-index 0)) "jiami_v3/ucrypto/ucrypto.go:24:	fmt.Println(\"decode key :\", string(head.A))" "jiami_v3/ucrypto/ucrypto.go:75:	fmt.Println(\"encode key: \", h.A)" "src/ures/common/oss.go:122:	if uploadType == ures_pb.UploadType_CertifyImg {" #("callback" 0 8 (ivy-index 4)) "src/ures/main.go:131:	StartListenCallBack()" "src/ures/common/oss.go:122:	if uploadType == ures_pb.UploadType_CertifyImg {" "src/ures/common/oss.go:122:	if uploadType == ures_pb.UploadType_CertifyImg {" "src/ures/common/oss.go:122:	if uploadType == ures_pb.UploadType_CertifyImg {" #("aliyun-oss-go-sdk" 0 17 (ivy-index 0)) "src/ures/common/oss.go:15:	\"github.com/aliyun/aliyun-oss-go-sdk/oss\"" #("ensure" 0 6 (ivy-index 1)) "lisp/lisp.el:4:(setq use-package-always-ensure t" #("smart" 0 5 (ivy-index 2)) "lisp/lisp.el:115:(use-package smart-mode-line-atom-one-dark-theme)" #("NODE_STAFF_CONFIRM" 0 18 (ivy-index 3)) "src/probation/admin/logic/logic_inside.go:332:		Type:     NODE_STAFF_CONFIRM," "src/probation/admin/logic/logic_inside.go:413:	SearchMap.Do(nil, &model.EvaluationLineNode{UserId: dbItem.Id, Status: NODE_PASS, Type: NODE_STAFF_CONFIRM}, dbItem)" #("posframe" 0 8 (ivy-index 2)) "lisp/lsp.el:17:(use-package posframe)" #("project" 0 7 (ivy-index 0)) #("user" 0 4 (ivy-index 0)) "tool/Linux创建、挂载、卸载文件系统.md:53:13107 blocks (5.00%) reserved for the super user" #("p" 0 1 (ivy-index 0))))
(setq shell-command-history '("/bin/zsh"))
(setq goto-line-history '("6000" "30" "100"))
(setq tmm--history '("h==>Help" "p==>Projectile" "T==>Text" "m==>Markdown" "t==>Tools" "b==>Buffers" "o==>Options" "e==>Edit" "f==>File"))
(setq evil-ex-history '(#("q" 0 1 (ex-index 1)) #("exit" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) #("'<,'>re" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7)) #("drag-stuff-up" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13)) #("windmove-left" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13)) #("'<,'>evil-previous-visual-line" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30)) #("evil-previous-visual-line" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25)) #("drag-stuff-up" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13)) #("'<,'>re" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7)) #("counsel-M-x" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11))))
(setq yes-or-no-p-history '("yes" "no" "yes" "no"))
(setq ivy-history '(#("main" 0 4 (ivy-index 1)) #("main.org" 0 8 (ivy-index 2)) #("m" 0 1 (ivy-index 2)) "git.md" #("gi" 0 2 (ivy-index 0)) "git.md" #("v" 0 1 (ivy-index 0)) "*vterm*" #("learn_org.org" 0 13 (ivy-index 1)) "*vterm*" #("aganda.md" 0 9 (ivy-index 1)) "*vterm*" #("ag" 0 2 (ivy-index 2)) #("ini" 0 3 (ivy-index 0)) "init.el" #("#linux.md#" 0 10 (ivy-index 2)) #("linux" 0 5 (ivy-index 0)) "base/#linux.md#" #("doc" 0 3 (ivy-index 0)) "~/Library/Mobile Documents/com~apple~CloudDocs/note/doc/" #("ucrypto.go" 0 10 (ivy-index 1)) #("lsp" 0 3 (ivy-index 0)) "*lsp-bridge*" #("probation.go" 0 12 (ivy-index 0)) "src/probation/admin/model/probation.go" #("proba" 0 5 (ivy-index 8)) "src/probation/admin/controller/probation_controller.go" "~/code/company/probation/" #("git" 0 3 (ivy-index 0)) "tool/git.md" "~/Library/Mobile Documents/com~apple~CloudDocs/note/doc/" "/Users/keeyu/Library/Mobile Documents/com~apple~CloudDocs/note/doc/tool/mongo.md" #("hand" 0 4 (ivy-index 0)) "/Users/keeyu/code/company/ures/src/ures/handler/file_handler.go" #("mac" 0 3 (ivy-index 0)) "base/mac.md" #("mongo" 0 5 (ivy-index 0)) "tool/mongo.md" "~/Library/Mobile Documents/com~apple~CloudDocs/note/doc/" #("org" 0 3 (ivy-index 0)) "/Users/keeyu/Library/Mobile Documents/com~apple~CloudDocs/note/doc/base/jiami.org" "/Users/keeyu/code/company/ures/src/ures/handler/file_handler.go" "/Users/keeyu/Library/Mobile Documents/com~apple~CloudDocs/note/doc/base/jiami.org" #("/Users/keeyu/code/company/ures/src/ures/handler/file_handler.go" 0 63 (ivy-index 6)) #("base" 0 4 (ivy-index 3)) "base/cross.md" "~/Library/Mobile Documents/com~apple~CloudDocs/note/doc/" #("file_handler.go" 0 15 (ivy-index 4)) #("file" 0 4 (ivy-index 2)) "src/ures/handler/file_handler.go" #("ures" 0 4 (ivy-index 0)) "~/code/company/ures/" "~/Library/Mobile Documents/com~apple~CloudDocs/note/doc/" "src/ures/handler/file_handler.go" #("ur" 0 2 (ivy-index 0)) "~/code/company/ures/" #("org.org" 0 7 (ivy-index 2)) "/Users/keeyu/note/aganda.md" #("rsa.go" 0 6 (ivy-index 2)) "jiami_v3/ucrypto/rsa.go" #("head" 0 4 (ivy-index 3)) "jiami_v3/ucrypto/head.go" #("main.go" 0 7 (ivy-index 6)) "jiami_v3/main.go" "ali_oss/main.go" #("key" 0 3 (ivy-index 0)) "/Users/keeyu/.emacs.d/lisp/keymap.el" #("or" 0 2 (ivy-index 0)) "/Users/keeyu/.emacs.d/lisp/keymap.el" "/Users/keeyu/Library/Mobile Documents/com~apple~CloudDocs/note/doc/org.org" "/Users/keeyu/.emacs.d/lisp/keymap.el" "keymap.el" "/Users/keeyu/Library/Mobile Documents/com~apple~CloudDocs/note/doc/org.org" "/Users/keeyu/.emacs.d/lisp/keymap.el" "/Users/keeyu/.emacs.d/lisp/keymap.el" "/Users/keeyu/.emacs.d/lisp/keymap.el" #("dash" 0 4 (ivy-index 0)) "*dashboard*" "keymap.el" #("image.org" 0 9 (ivy-index 1)) #("card_encode.md" 0 14 (ivy-index 5)) "main.go<jiami_v3>" #("work" 0 4 (ivy-index 3)) "work/card_encode.md" #("no" 0 2 (ivy-index 0)) "~/Library/Mobile Documents/com~apple~CloudDocs/note/doc/" "/Users/keeyu/.emacs.d/lisp/keymap.el" "main.go<ali_oss>" "main.go<ures>" #("md" 0 2 (ivy-index 0)) "main.go<ali_oss>" #("c" 0 1 (ivy-index 0)) "main.go<ures>" #("/Users/keeyu/code/self/new-tool/ali_oss/main.go" 0 47 (ivy-index 0)) #("go.mod" 0 6 (ivy-index 0)) #("oss" 0 3 (ivy-index 0)) "oss_sts_callback.go" "work/card_encode.md" "~/Library/Mobile Documents/com~apple~CloudDocs/note/doc/"))
(setq swiper-history '(#("jiami" 0 5 (ivy-index 0)) #("55   alias j.e=\"jiami -m e -f $@\"" 0 1 (swiper-line-number 55) 5 10 (face font-lock-builtin-face fontified t) 10 15 (fontified t) 15 31 (face font-lock-string-face fontified t) 31 32 (face font-lock-string-face syntax-table (3) fontified t) 32 33 (face font-lock-string-face fontified t)) #("hash" 0 4 (ivy-index 5)) #("84   	hash := crypto.SHA384.New()" 0 1 (swiper-line-number 84) 5 6 (fontified t) 6 10 (fontified t face font-lock-variable-name-face) 10 16 (fontified t) 16 28 (fontified t) 28 31 (fontified t face font-lock-function-name-face) 31 32 (fontified t face (rainbow-delimiters-depth-2-face)) 32 33 (fontified t face (rainbow-delimiters-depth-2-face))) #("107  	h.Hash = hash //hash.Sum(nil)" 0 1 (swiper-line-number 107) 5 20 (fontified t) 20 22 (fontified t face font-lock-comment-delimiter-face) 22 35 (fontified t face font-lock-comment-face)) #("decode" 0 6 (ivy-index 7)) #("52   		return nil, fmt.Errorf(\"校验失败 decode  :%v\\nhash: %v\", decodeHash, head.Hash)" 0 1 (swiper-line-number 52) 5 7 (fontified t) 7 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 17 (fontified t face font-lock-constant-face) 17 23 (fontified t) 23 29 (fontified t face font-lock-function-name-face) 29 30 (fontified t face (rainbow-delimiters-depth-3-face)) 30 47 (fontified t face font-lock-string-face) 47 48 (fontified t syntax-table (9) face font-lock-string-face) 48 58 (fontified t face font-lock-string-face) 58 81 (fontified t) 81 82 (fontified t face (rainbow-delimiters-depth-3-face))) #("1" 0 1 (ivy-index 18)) #("88   	data, err := EncodeNoSeek(1, info.Name(), info.Size(), hash.Sum(nil), buf)" 0 1 (swiper-line-number 88) 5 6 (fontified t) 6 10 (fontified t face font-lock-variable-name-face) 10 12 (fontified t) 12 15 (fontified t face font-lock-variable-name-face) 15 19 (fontified t) 19 31 (fontified t face font-lock-function-name-face) 31 32 (fontified t face (rainbow-delimiters-depth-2-face)) 32 40 (fontified t) 40 44 (fontified t face font-lock-function-name-face) 44 45 (fontified t face (rainbow-delimiters-depth-3-face)) 45 46 (fontified t face (rainbow-delimiters-depth-3-face)) 46 53 (fontified t) 53 57 (fontified t face font-lock-function-name-face) 57 58 (fontified t face (rainbow-delimiters-depth-3-face)) 58 59 (fontified t face (rainbow-delimiters-depth-3-face)) 59 66 (fontified t) 66 69 (fontified t face font-lock-function-name-face) 69 70 (fontified t face (rainbow-delimiters-depth-3-face)) 70 73 (fontified t face font-lock-constant-face) 73 74 (fontified t face (rainbow-delimiters-depth-3-face)) 74 79 (fontified t) 79 80 (fontified t face (rainbow-delimiters-depth-2-face))) #("59   	LoadSecret(1, secret)" 0 1 (swiper-line-number 59) 5 6 (fontified t) 6 16 (fontified t face font-lock-function-name-face) 16 17 (fontified t face (rainbow-delimiters-depth-2-face)) 17 26 (fontified t) 26 27 (fontified t face (rainbow-delimiters-depth-2-face))) "1d" #("13   	LoadSecret(1, secret)" 0 1 (swiper-line-number 13) 5 6 (fontified t) 6 16 (fontified t face font-lock-function-name-face) 16 17 (fontified t face (rainbow-delimiters-depth-2-face)) 17 26 (fontified t) 26 27 (fontified t face (rainbow-delimiters-depth-2-face))) #("prepare" 0 7 (ivy-index 1)) #("53   	PrepareIndicator bool   `gorm:\"column:prepare_indicator\" json:\"prepare_indicator\"`         //考核指标设置完毕" 0 1 (swiper-line-number 53) 5 23 (fontified t) 23 27 (face font-lock-type-face fontified t) 27 30 (fontified t) 30 88 (face font-lock-string-face fontified t) 88 97 (fontified t) 97 99 (face font-lock-comment-delimiter-face fontified t) 99 107 (face font-lock-comment-face fontified t)) #("setline" 0 7 (ivy-index 3)) #("114   		return fmt.Errorf(\"setLine: setLineKey\")" 0 1 (swiper-line-number 114) 6 8 (fontified t) 8 14 (face font-lock-keyword-face fontified t) 14 19 (fontified t) 19 25 (face font-lock-function-name-face fontified t) 25 26 (face (rainbow-delimiters-depth-3-face) fontified t) 26 47 (face font-lock-string-face fontified t) 47 48 (face (rainbow-delimiters-depth-3-face) fontified t)) #("apply" 0 5 (ivy-index 0)) #("378  func (p *ProbationController) Apply(param map[string]any) *https.ResponseBody {" 0 1 (swiper-line-number 378) 5 9 (face font-lock-keyword-face fontified t) 9 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-1-face) fontified t) 11 12 (face font-lock-variable-name-face fontified t) 12 14 (fontified t) 14 33 (face font-lock-type-face fontified t) 33 34 (face (rainbow-delimiters-depth-1-face) fontified t) 34 35 (fontified t) 35 40 (face font-lock-function-name-face fontified t) 40 41 (face (rainbow-delimiters-depth-1-face) fontified t) 41 46 (face font-lock-variable-name-face fontified t) 46 47 (fontified t) 47 50 (face font-lock-keyword-face fontified t) 50 51 (face (rainbow-delimiters-depth-2-face) fontified t) 51 57 (face font-lock-type-face fontified t) 57 58 (face (rainbow-delimiters-depth-2-face) fontified t) 58 61 (face font-lock-type-face fontified t) 61 62 (face (rainbow-delimiters-depth-1-face) fontified t) 62 64 (fontified t) 64 82 (face font-lock-type-face fontified t) 82 83 (fontified t) 83 84 (face (rainbow-delimiters-depth-1-face) fontified t)) #("delete" 0 6 (ivy-index 0)) #("154  func (c *ossClient) DeleteFile(fileUrl string) error {" 0 1 (swiper-line-number 154) 5 9 (face font-lock-keyword-face fontified t) 9 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-1-face) fontified t) 11 12 (face font-lock-variable-name-face fontified t) 12 14 (fontified t) 14 23 (face font-lock-type-face fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 25 (fontified t) 25 35 (face font-lock-function-name-face fontified t) 35 36 (face (rainbow-delimiters-depth-1-face) fontified t) 36 43 (face font-lock-variable-name-face fontified t) 43 44 (fontified t) 44 50 (face font-lock-type-face fontified t) 50 51 (face (rainbow-delimiters-depth-1-face) fontified t) 51 52 (fontified t) 52 57 (face font-lock-type-face fontified t) 57 58 (fontified t) 58 59 (face (rainbow-delimiters-depth-1-face) fontified t)) #("wtm" 0 3 (ivy-index 0)) #("288  	process := fmt.Sprintf(\"%s|sys/saveas,o_%v,b_%v\", style, base64.URLEncoding.EncodeToString([]byte(\"wtm_\"+fileName)), base64.URLEncoding.EncodeToString([]byte(bucketName)))" 0 1 (swiper-line-number 288) 5 6 (fontified t) 6 13 (face font-lock-variable-name-face fontified t) 13 21 (fontified t) 21 28 (face font-lock-function-name-face fontified t) 28 29 (face (rainbow-delimiters-depth-2-face) fontified t) 29 54 (face font-lock-string-face fontified t) 54 82 (fontified t) 82 96 (face font-lock-function-name-face fontified t) 96 97 (face (rainbow-delimiters-depth-3-face) fontified t) 97 98 (face (rainbow-delimiters-depth-4-face) fontified t) 98 99 (face (rainbow-delimiters-depth-4-face) fontified t) 99 103 (face font-lock-function-name-face fontified t) 103 104 (face (rainbow-delimiters-depth-4-face) fontified t) 104 110 (face font-lock-string-face fontified t) 110 119 (fontified t) 119 120 (face (rainbow-delimiters-depth-4-face) fontified t) 120 121 (face (rainbow-delimiters-depth-3-face) fontified t) 121 142 (fontified t) 142 156 (face font-lock-function-name-face fontified t) 156 157 (face (rainbow-delimiters-depth-3-face) fontified t) 157 158 (face (rainbow-delimiters-depth-4-face) fontified t) 158 159 (face (rainbow-delimiters-depth-4-face) fontified t) 159 163 (face font-lock-function-name-face fontified t) 163 164 (face (rainbow-delimiters-depth-4-face) fontified t) 164 174 (fontified t) 174 175 (face (rainbow-delimiters-depth-4-face) fontified t) 175 176 (face (rainbow-delimiters-depth-3-face) fontified t) 176 177 (face (rainbow-delimiters-depth-2-face) fontified t)) "buck" #("tab" 0 3 (ivy-index 3)) #("48      (evil-define-key '(normal) 'org-mode-map (kbd \"S-<TAB>\") 'org-shifttab);全部展开" 0 1 (swiper-line-number 48) 4 8 (fontified t) 8 9 (fontified t face (rainbow-delimiters-depth-2-face)) 9 24 (fontified t face font-lock-keyword-face) 24 26 (fontified t) 26 27 (fontified t face (rainbow-delimiters-depth-3-face)) 27 33 (fontified t) 33 34 (fontified t face (rainbow-delimiters-depth-3-face)) 34 49 (fontified t) 49 50 (fontified t face (rainbow-delimiters-depth-3-face)) 50 54 (fontified t) 54 63 (fontified t face font-lock-string-face) 63 64 (fontified t face (rainbow-delimiters-depth-3-face)) 64 78 (fontified t) 78 79 (fontified t face (rainbow-delimiters-depth-2-face)) 79 80 (fontified t face font-lock-comment-delimiter-face) 80 84 (fontified t face font-lock-comment-face)) "leader>" #("uploadType" 0 10 (ivy-index 0)) #("99   func (c *ossClient) GetStsToken(appID int, playerId int64, policy *Policy, uploadType ures_pb.UploadType, isPrivate bool) (" 0 1 (swiper-line-number 99) 5 9 (fontified t face font-lock-keyword-face) 9 10 (fontified t) 10 11 (fontified t face (rainbow-delimiters-depth-1-face)) 11 12 (fontified t face font-lock-variable-name-face) 12 14 (fontified t) 14 23 (fontified t face font-lock-type-face) 23 24 (fontified t face (rainbow-delimiters-depth-1-face)) 24 25 (fontified t) 25 36 (fontified t face font-lock-function-name-face) 36 37 (fontified t face (rainbow-delimiters-depth-1-face)) 37 42 (fontified t face font-lock-variable-name-face) 42 43 (fontified t) 43 46 (fontified t face font-lock-type-face) 46 48 (fontified t) 48 56 (fontified t face font-lock-variable-name-face) 56 57 (fontified t) 57 62 (fontified t face font-lock-type-face) 62 64 (fontified t) 64 70 (fontified t face font-lock-variable-name-face) 70 72 (fontified t) 72 78 (fontified t face font-lock-type-face) 78 80 (fontified t) 80 90 (fontified t face font-lock-variable-name-face) 90 91 (fontified t) 91 109 (fontified t face font-lock-type-face) 109 111 (fontified t) 111 120 (fontified t face font-lock-variable-name-face) 120 121 (fontified t) 121 125 (fontified t face font-lock-type-face) 125 126 (fontified t face (rainbow-delimiters-depth-1-face)) 126 127 (fontified t) 127 128 (fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face))) #("aliyun" 0 6 (ivy-index 0)) #("9   	github.com/aliyun/aliyun-oss-go-sdk v2.1.5+incompatible" 0 1 (swiper-line-number 9) 4 5 (fontified t) 5 40 (fontified t face go-dot-mod-module-name) 40 41 (fontified t) 41 47 (fontified t face go-dot-mod-module-semver) 47 60 (fontified t face go-dot-mod-module-version)) #("dirvish" 0 7 (ivy-index 0)) #("155  (use-package dirvish)" 0 1 (swiper-line-number 155) 5 6 (face (rainbow-delimiters-depth-1-face) fontified t) 6 17 (face font-lock-keyword-face fontified t) 17 18 (fontified t) 18 25 (face font-lock-constant-face fontified t) 25 26 (face (rainbow-delimiters-depth-1-face) fontified t)) #("c-p" 0 3 (ivy-index 0)) #("51      (evil-define-key '(normal visual) 'global (kbd \"C-p\") 'next-ten-lines);向下移动行)" 0 1 (swiper-line-number 51) 4 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t) 9 24 (face font-lock-keyword-face fontified t) 24 26 (fontified t) 26 27 (face (rainbow-delimiters-depth-3-face) fontified t) 27 40 (fontified t) 40 41 (face (rainbow-delimiters-depth-3-face) fontified t) 41 50 (fontified t) 50 51 (face (rainbow-delimiters-depth-3-face) fontified t) 51 55 (fontified t) 55 60 (face font-lock-string-face fontified t) 60 61 (face (rainbow-delimiters-depth-3-face) fontified t) 61 77 (fontified t) 77 78 (face (rainbow-delimiters-depth-2-face) fontified t) 78 79 (face font-lock-comment-delimiter-face fontified t) 79 85 (face font-lock-comment-face fontified t)) "next-ten-lines" #("previous-ten-lines" 0 18 (ivy-index 1)) #("52      (evil-define-key '(normal visual) 'global (kbd \"C-n\") 'previous-ten-lines);向下移动行)" 0 1 (swiper-line-number 52) 4 8 (fontified t) 8 9 (fontified t face (rainbow-delimiters-depth-2-face)) 9 24 (fontified t face font-lock-keyword-face) 24 26 (fontified t) 26 27 (fontified t face (rainbow-delimiters-depth-3-face)) 27 40 (fontified t) 40 41 (fontified t face (rainbow-delimiters-depth-3-face)) 41 50 (fontified t) 50 51 (fontified t face (rainbow-delimiters-depth-3-face)) 51 55 (fontified t) 55 60 (fontified t face font-lock-string-face) 60 61 (fontified t face (rainbow-delimiters-depth-3-face)) 61 63 (fontified t) 63 70 (fontified t) 70 71 (fontified t rear-nonsticky t) 71 81 (fontified t) 81 82 (fontified t face (rainbow-delimiters-depth-2-face)) 82 83 (fontified t face font-lock-comment-delimiter-face) 83 89 (fontified t face font-lock-comment-face)) #("43      (evil-define-key '(normal visual) 'global (kbd \"C-p\") 'scroll-down-command);向下移动行)" 0 1 (swiper-line-number 43) 4 8 (fontified t) 8 9 (fontified t face (rainbow-delimiters-depth-2-face)) 9 24 (fontified t face font-lock-keyword-face) 24 26 (fontified t) 26 27 (fontified t face (rainbow-delimiters-depth-3-face)) 27 40 (fontified t) 40 41 (fontified t face (rainbow-delimiters-depth-3-face)) 41 50 (fontified t) 50 51 (fontified t face (rainbow-delimiters-depth-3-face)) 51 55 (fontified t) 55 60 (fontified t face font-lock-string-face) 60 61 (fontified t face (rainbow-delimiters-depth-3-face)) 61 82 (fontified t) 82 83 (fontified t face (rainbow-delimiters-depth-2-face)) 83 84 (fontified t face font-lock-comment-delimiter-face) 84 90 (fontified t face font-lock-comment-face)) #("base" 0 4 (ivy-index 0)) #("28   func baseImageForTest() image.Image {" 0 1 (swiper-line-number 28) 5 9 (fontified t face font-lock-keyword-face) 9 10 (fontified t) 10 11 (fontified t face font-lock-function-name-face) 11 26 (fontified t face font-lock-function-name-face) 26 27 (fontified t face (rainbow-delimiters-depth-1-face)) 27 28 (fontified t face (rainbow-delimiters-depth-1-face)) 28 29 (fontified t) 29 40 (fontified t face font-lock-type-face) 40 41 (fontified t) 41 42 (fontified t face (rainbow-delimiters-depth-1-face))) #("main" 0 4 (ivy-index 1)) #("18   func main() {" 0 1 (swiper-line-number 18) 5 9 (fontified t face font-lock-keyword-face) 9 10 (fontified t) 10 14 (fontified t face font-lock-function-name-face) 14 15 (fontified t face (rainbow-delimiters-depth-1-face)) 15 16 (fontified t face (rainbow-delimiters-depth-1-face)) 16 17 (fontified t) 17 18 (fontified t face (rainbow-delimiters-depth-1-face))) #("draw" 0 4 (ivy-index 0)) #("7    	\"image/draw\"" 0 1 (swiper-line-number 7) 5 6 (fontified t) 6 18 (fontified t face font-lock-string-face)) #(".base" 0 5 (ivy-index 2)) #("47   	anyhow, err := AddWatermarkForImage(baseImageForTest(), \"adsfasfa\")" 0 1 (swiper-line-number 47) 5 6 (fontified t) 6 12 (fontified t face font-lock-variable-name-face) 12 13 (fontified t) 13 14 (fontified t) 14 17 (fontified t face font-lock-variable-name-face) 17 18 (fontified t) 18 20 (fontified t) 20 21 (fontified t) 21 41 (fontified t face font-lock-function-name-face) 41 42 (fontified t face (rainbow-delimiters-depth-2-face)) 42 58 (fontified t face font-lock-function-name-face) 58 59 (fontified t face (rainbow-delimiters-depth-3-face)) 59 60 (fontified t face (rainbow-delimiters-depth-3-face)) 60 61 (fontified t) 61 62 (fontified t) 62 72 (fontified t face font-lock-string-face) 72 73 (fontified t face (rainbow-delimiters-depth-2-face))) #("NODE" 0 4 (ivy-index 0)) #("59       let node = Regex::new(\"NODE\").expect(\"regex caller err\");" 0 1 (swiper-line-number 59) 5 9 (fontified t) 9 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 17 (fontified t face font-lock-variable-name-face) 17 20 (fontified t) 20 25 (fontified t face font-lock-type-face) 25 30 (fontified t) 30 31 (fontified t face (rainbow-delimiters-depth-2-face)) 31 37 (fontified t face font-lock-string-face) 37 38 (fontified t face (rainbow-delimiters-depth-2-face)) 38 45 (fontified t) 45 46 (fontified t face (rainbow-delimiters-depth-2-face)) 46 64 (fontified t face font-lock-string-face) 64 65 (fontified t face (rainbow-delimiters-depth-2-face)) 65 66 (fontified t)) #("text" 0 4 (ivy-index 4)) #("90   	width, height := int(fontSize)*len(text), int(fontSize)*2" 0 1 (swiper-line-number 90) 5 6 (fontified t) 6 11 (fontified t face font-lock-variable-name-face) 11 13 (fontified t) 13 19 (fontified t face font-lock-variable-name-face) 19 23 (fontified t) 23 26 (fontified t face font-lock-function-name-face) 26 27 (fontified t face (rainbow-delimiters-depth-2-face)) 27 35 (fontified t) 35 36 (fontified t face (rainbow-delimiters-depth-2-face)) 36 37 (fontified t) 37 40 (fontified t face font-lock-builtin-face) 40 41 (fontified t face (rainbow-delimiters-depth-2-face)) 41 45 (fontified t) 45 46 (fontified t face (rainbow-delimiters-depth-2-face)) 46 48 (fontified t) 48 51 (fontified t face font-lock-function-name-face) 51 52 (fontified t face (rainbow-delimiters-depth-2-face)) 52 60 (fontified t) 60 61 (fontified t face (rainbow-delimiters-depth-2-face)) 61 63 (fontified t)) #("uid" 0 3 (ivy-index 1)) #("65   	watermark, err := MakeImageByText(uid, color.Transparent)" 0 1 (swiper-line-number 65) 5 6 (fontified t) 6 15 (fontified t face font-lock-variable-name-face) 15 17 (fontified t) 17 20 (fontified t face font-lock-variable-name-face) 20 24 (fontified t) 24 39 (fontified t face font-lock-function-name-face) 39 40 (fontified t face (rainbow-delimiters-depth-2-face)) 40 62 (fontified t) 62 63 (fontified t face (rainbow-delimiters-depth-2-face))) #("sf" 0 2 (ivy-index 0)) #("49      (evil-define-key '(normal) 'global (kbd \"<leader>sf\") 'project-find-file);选buff" 0 1 (swiper-line-number 49) 4 8 (fontified t) 8 9 (fontified t face (rainbow-delimiters-depth-2-face)) 9 24 (fontified t face font-lock-keyword-face) 24 26 (fontified t) 26 27 (fontified t face (rainbow-delimiters-depth-3-face)) 27 33 (fontified t) 33 34 (fontified t face (rainbow-delimiters-depth-3-face)) 34 43 (fontified t) 43 44 (fontified t face (rainbow-delimiters-depth-3-face)) 44 48 (fontified t) 48 60 (fontified t face font-lock-string-face) 60 61 (fontified t face (rainbow-delimiters-depth-3-face)) 61 80 (fontified t) 80 81 (fontified t face (rainbow-delimiters-depth-2-face)) 81 82 (fontified t face font-lock-comment-delimiter-face) 82 87 (fontified t face font-lock-comment-face)) #("lisp" 0 4 (ivy-index 1)) #("72  (require 'lisp)" 0 1 (swiper-line-number 72) 4 5 (fontified t face (rainbow-delimiters-depth-1-face)) 5 12 (fontified t face font-lock-keyword-face) 12 14 (fontified t) 14 18 (fontified t face font-lock-constant-face) 18 19 (fontified t face (rainbow-delimiters-depth-1-face))) "lsip" "rust" "func" #("super-save" 0 10 (ivy-index 0)) #("5188    super-save                     20220531.1745  available    melpa    Auto-save buffers, based on your activity." 0 1 (swiper-line-number 5188) 6 8 (tabulated-list-id #s(package-desc super-save (20220531 1745) "Auto-save buffers, based on your activity." ((emacs (24 4))) single "melpa" nil ((:commit . "6f6512bc44b09f7187e58772892fa330f4518c12") (:authors ("Bozhidar Batsov" . "bozhidar@batsov.com")) (:maintainer "Bozhidar Batsov" . "bozhidar@batsov.com") (:keywords "convenience") (:url . "https://github.com/bbatsov/super-save")) nil) tabulated-list-entry [("super-save" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc super-save (20220531 1745) "Auto-save buffers, based on your activity." ((emacs (24 4))) single "melpa" nil ((:commit . "6f6512bc44b09f7187e58772892fa330f4518c12") (:authors ("Bozhidar Batsov" . "bozhidar@batsov.com")) (:maintainer "Bozhidar Batsov" . "bozhidar@batsov.com") (:keywords "convenience") (:url . "https://github.com/bbatsov/super-save")) nil) action package-menu-describe-package) #("20220531.1745" 0 13 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa" 0 5 (font-lock-face package-status-available)) #("Auto-save buffers, based on your activity." 0 42 (font-lock-face package-description))]) 8 18 (button (t) category default-button face package-name font-lock-face package-name follow-link t package-desc #s(package-desc super-save (20220531 1745) "Auto-save buffers, based on your activity." ((emacs (24 4))) single "melpa" nil ((:commit . "6f6512bc44b09f7187e58772892fa330f4518c12") (:authors ("Bozhidar Batsov" . "bozhidar@batsov.com")) (:maintainer "Bozhidar Batsov" . "bozhidar@batsov.com") (:keywords "convenience") (:url . "https://github.com/bbatsov/super-save")) nil) action package-menu-describe-package tabulated-list-column-name "Package" tabulated-list-id #s(package-desc super-save (20220531 1745) "Auto-save buffers, based on your activity." ((emacs (24 4))) single "melpa" nil ((:commit . "6f6512bc44b09f7187e58772892fa330f4518c12") (:authors ("Bozhidar Batsov" . "bozhidar@batsov.com")) (:maintainer "Bozhidar Batsov" . "bozhidar@batsov.com") (:keywords "convenience") (:url . "https://github.com/bbatsov/super-save")) nil) tabulated-list-entry [("super-save" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc super-save (20220531 1745) "Auto-save buffers, based on your activity." ((emacs (24 4))) single "melpa" nil ((:commit . "6f6512bc44b09f7187e58772892fa330f4518c12") (:authors ("Bozhidar Batsov" . "bozhidar@batsov.com")) (:maintainer "Bozhidar Batsov" . "bozhidar@batsov.com") (:keywords "convenience") (:url . "https://github.com/bbatsov/super-save")) nil) action package-menu-describe-package) #("20220531.1745" 0 13 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa" 0 5 (font-lock-face package-status-available)) #("Auto-save buffers, based on your activity." 0 42 (font-lock-face package-description))]) 18 19 (tabulated-list-column-name "Package" tabulated-list-id #s(package-desc super-save (20220531 1745) "Auto-save buffers, based on your activity." ((emacs (24 4))) single "melpa" nil ((:commit . "6f6512bc44b09f7187e58772892fa330f4518c12") (:authors ("Bozhidar Batsov" . "bozhidar@batsov.com")) (:maintainer "Bozhidar Batsov" . "bozhidar@batsov.com") (:keywords "convenience") (:url . "https://github.com/bbatsov/super-save")) nil) tabulated-list-entry [("super-save" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc super-save (20220531 1745) "Auto-save buffers, based on your activity." ((emacs (24 4))) single "melpa" nil ((:commit . "6f6512bc44b09f7187e58772892fa330f4518c12") (:authors ("Bozhidar Batsov" . "bozhidar@batsov.com")) (:maintainer "Bozhidar Batsov" . "bozhidar@batsov.com") (:keywords "convenience") (:url . "https://github.com/bbatsov/super-save")) nil) action package-menu-describe-package) #("20220531.1745" 0 13 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa" 0 5 (font-lock-face package-status-available)) #("Auto-save buffers, based on your activity." 0 42 (font-lock-face package-description))]) 19 39 (display (space :align-to 33) tabulated-list-column-name "Package" tabulated-list-id #s(package-desc super-save (20220531 1745) "Auto-save buffers, based on your activity." ((emacs (24 4))) single "melpa" nil ((:commit . "6f6512bc44b09f7187e58772892fa330f4518c12") (:authors ("Bozhidar Batsov" . "bozhidar@batsov.com")) (:maintainer "Bozhidar Batsov" . "bozhidar@batsov.com") (:keywords "convenience") (:url . "https://github.com/bbatsov/super-save")) nil) tabulated-list-entry [("super-save" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc super-save (20220531 1745) "Auto-save buffers, based on your activity." ((emacs (24 4))) single "melpa" nil ((:commit . "6f6512bc44b09f7187e58772892fa330f4518c12") (:authors ("Bozhidar Batsov" . "bozhidar@batsov.com")) (:maintainer "Bozhidar Batsov" . "bozhidar@batsov.com") (:keywords "convenience") (:url . "https://github.com/bbatsov/super-save")) nil) action package-menu-describe-package) #("20220531.1745" 0 13 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa" 0 5 (font-lock-face package-status-available)) #("Auto-save buffers, based on your activity." 0 42 (font-lock-face package-description))]) 39 52 (font-lock-face package-status-available help-echo #("Version: 20220531.1745" 9 22 (font-lock-face package-status-available)) tabulated-list-column-name "Version" tabulated-list-id #s(package-desc super-save (20220531 1745) "Auto-save buffers, based on your activity." ((emacs (24 4))) single "melpa" nil ((:commit . "6f6512bc44b09f7187e58772892fa330f4518c12") (:authors ("Bozhidar Batsov" . "bozhidar@batsov.com")) (:maintainer "Bozhidar Batsov" . "bozhidar@batsov.com") (:keywords "convenience") (:url . "https://github.com/bbatsov/super-save")) nil) tabulated-list-entry [("super-save" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc super-save (20220531 1745) "Auto-save buffers, based on your activity." ((emacs (24 4))) single "melpa" nil ((:commit . "6f6512bc44b09f7187e58772892fa330f4518c12") (:authors ("Bozhidar Batsov" . "bozhidar@batsov.com")) (:maintainer "Bozhidar Batsov" . "bozhidar@batsov.com") (:keywords "convenience") (:url . "https://github.com/bbatsov/super-save")) nil) action package-menu-describe-package) #("20220531.1745" 0 13 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa" 0 5 (font-lock-face package-status-available)) #("Auto-save buffers, based on your activity." 0 42 (font-lock-face package-description))]) 52 53 (tabulated-list-column-name "Version" tabulated-list-id #s(package-desc super-save (20220531 1745) "Auto-save buffers, based on your activity." ((emacs (24 4))) single "melpa" nil ((:commit . "6f6512bc44b09f7187e58772892fa330f4518c12") (:authors ("Bozhidar Batsov" . "bozhidar@batsov.com")) (:maintainer "Bozhidar Batsov" . "bozhidar@batsov.com") (:keywords "convenience") (:url . "https://github.com/bbatsov/super-save")) nil) tabulated-list-entry [("super-save" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc super-save (20220531 1745) "Auto-save buffers, based on your activity." ((emacs (24 4))) single "melpa" nil ((:commit . "6f6512bc44b09f7187e58772892fa330f4518c12") (:authors ("Bozhidar Batsov" . "bozhidar@batsov.com")) (:maintainer "Bozhidar Batsov" . "bozhidar@batsov.com") (:keywords "convenience") (:url . "https://github.com/bbatsov/super-save")) nil) action package-menu-describe-package) #("20220531.1745" 0 13 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa" 0 5 (font-lock-face package-status-available)) #("Auto-save buffers, based on your activity." 0 42 (font-lock-face package-description))]) 53 54 (display (space :align-to 48) tabulated-list-column-name "Version" tabulated-list-id #s(package-desc super-save (20220531 1745) "Auto-save buffers, based on your activity." ((emacs (24 4))) single "melpa" nil ((:commit . "6f6512bc44b09f7187e58772892fa330f4518c12") (:authors ("Bozhidar Batsov" . "bozhidar@batsov.com")) (:maintainer "Bozhidar Batsov" . "bozhidar@batsov.com") (:keywords "convenience") (:url . "https://github.com/bbatsov/super-save")) nil) tabulated-list-entry [("super-save" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc super-save (20220531 1745) "Auto-save buffers, based on your activity." ((emacs (24 4))) single "melpa" nil ((:commit . "6f6512bc44b09f7187e58772892fa330f4518c12") (:authors ("Bozhidar Batsov" . "bozhidar@batsov.com")) (:maintainer "Bozhidar Batsov" . "bozhidar@batsov.com") (:keywords "convenience") (:url . "https://github.com/bbatsov/super-save")) nil) action package-menu-describe-package) #("20220531.1745" 0 13 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa" 0 5 (font-lock-face package-status-available)) #("Auto-save buffers, based on your activity." 0 42 (font-lock-face package-description))]) 54 63 (font-lock-face package-status-available help-echo #("Status: available" 8 17 (font-lock-face package-status-available)) tabulated-list-column-name "Status" tabulated-list-id #s(package-desc super-save (20220531 1745) "Auto-save buffers, based on your activity." ((emacs (24 4))) single "melpa" nil ((:commit . "6f6512bc44b09f7187e58772892fa330f4518c12") (:authors ("Bozhidar Batsov" . "bozhidar@batsov.com")) (:maintainer "Bozhidar Batsov" . "bozhidar@batsov.com") (:keywords "convenience") (:url . "https://github.com/bbatsov/super-save")) nil) tabulated-list-entry [("super-save" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc super-save (20220531 1745) "Auto-save buffers, based on your activity." ((emacs (24 4))) single "melpa" nil ((:commit . "6f6512bc44b09f7187e58772892fa330f4518c12") (:authors ("Bozhidar Batsov" . "bozhidar@batsov.com")) (:maintainer "Bozhidar Batsov" . "bozhidar@batsov.com") (:keywords "convenience") (:url . "https://github.com/bbatsov/super-save")) nil) action package-menu-describe-package) #("20220531.1745" 0 13 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa" 0 5 (font-lock-face package-status-available)) #("Auto-save buffers, based on your activity." 0 42 (font-lock-face package-description))]) 63 64 (tabulated-list-column-name "Status" tabulated-list-id #s(package-desc super-save (20220531 1745) "Auto-save buffers, based on your activity." ((emacs (24 4))) single "melpa" nil ((:commit . "6f6512bc44b09f7187e58772892fa330f4518c12") (:authors ("Bozhidar Batsov" . "bozhidar@batsov.com")) (:maintainer "Bozhidar Batsov" . "bozhidar@batsov.com") (:keywords "convenience") (:url . "https://github.com/bbatsov/super-save")) nil) tabulated-list-entry [("super-save" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc super-save (20220531 1745) "Auto-save buffers, based on your activity." ((emacs (24 4))) single "melpa" nil ((:commit . "6f6512bc44b09f7187e58772892fa330f4518c12") (:authors ("Bozhidar Batsov" . "bozhidar@batsov.com")) (:maintainer "Bozhidar Batsov" . "bozhidar@batsov.com") (:keywords "convenience") (:url . "https://github.com/bbatsov/super-save")) nil) action package-menu-describe-package) #("20220531.1745" 0 13 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa" 0 5 (font-lock-face package-status-available)) #("Auto-save buffers, based on your activity." 0 42 (font-lock-face package-description))]) 64 67 (display (space :align-to 61) tabulated-list-column-name "Status" tabulated-list-id #s(package-desc super-save (20220531 1745) "Auto-save buffers, based on your activity." ((emacs (24 4))) single "melpa" nil ((:commit . "6f6512bc44b09f7187e58772892fa330f4518c12") (:authors ("Bozhidar Batsov" . "bozhidar@batsov.com")) (:maintainer "Bozhidar Batsov" . "bozhidar@batsov.com") (:keywords "convenience") (:url . "https://github.com/bbatsov/super-save")) nil) tabulated-list-entry [("super-save" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc super-save (20220531 1745) "Auto-save buffers, based on your activity." ((emacs (24 4))) single "melpa" nil ((:commit . "6f6512bc44b09f7187e58772892fa330f4518c12") (:authors ("Bozhidar Batsov" . "bozhidar@batsov.com")) (:maintainer "Bozhidar Batsov" . "bozhidar@batsov.com") (:keywords "convenience") (:url . "https://github.com/bbatsov/super-save")) nil) action package-menu-describe-package) #("20220531.1745" 0 13 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa" 0 5 (font-lock-face package-status-available)) #("Auto-save buffers, based on your activity." 0 42 (font-lock-face package-description))]) 67 72 (font-lock-face package-status-available help-echo #("Archive: melpa" 9 14 (font-lock-face package-status-available)) tabulated-list-column-name "Archive" tabulated-list-id #s(package-desc super-save (20220531 1745) "Auto-save buffers, based on your activity." ((emacs (24 4))) single "melpa" nil ((:commit . "6f6512bc44b09f7187e58772892fa330f4518c12") (:authors ("Bozhidar Batsov" . "bozhidar@batsov.com")) (:maintainer "Bozhidar Batsov" . "bozhidar@batsov.com") (:keywords "convenience") (:url . "https://github.com/bbatsov/super-save")) nil) tabulated-list-entry [("super-save" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc super-save (20220531 1745) "Auto-save buffers, based on your activity." ((emacs (24 4))) single "melpa" nil ((:commit . "6f6512bc44b09f7187e58772892fa330f4518c12") (:authors ("Bozhidar Batsov" . "bozhidar@batsov.com")) (:maintainer "Bozhidar Batsov" . "bozhidar@batsov.com") (:keywords "convenience") (:url . "https://github.com/bbatsov/super-save")) nil) action package-menu-describe-package) #("20220531.1745" 0 13 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa" 0 5 (font-lock-face package-status-available)) #("Auto-save buffers, based on your activity." 0 42 (font-lock-face package-description))]) 72 73 (tabulated-list-column-name "Archive" tabulated-list-id #s(package-desc super-save (20220531 1745) "Auto-save buffers, based on your activity." ((emacs (24 4))) single "melpa" nil ((:commit . "6f6512bc44b09f7187e58772892fa330f4518c12") (:authors ("Bozhidar Batsov" . "bozhidar@batsov.com")) (:maintainer "Bozhidar Batsov" . "bozhidar@batsov.com") (:keywords "convenience") (:url . "https://github.com/bbatsov/super-save")) nil) tabulated-list-entry [("super-save" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc super-save (20220531 1745) "Auto-save buffers, based on your activity." ((emacs (24 4))) single "melpa" nil ((:commit . "6f6512bc44b09f7187e58772892fa330f4518c12") (:authors ("Bozhidar Batsov" . "bozhidar@batsov.com")) (:maintainer "Bozhidar Batsov" . "bozhidar@batsov.com") (:keywords "convenience") (:url . "https://github.com/bbatsov/super-save")) nil) action package-menu-describe-package) #("20220531.1745" 0 13 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa" 0 5 (font-lock-face package-status-available)) #("Auto-save buffers, based on your activity." 0 42 (font-lock-face package-description))]) 73 76 (display (space :align-to 70) tabulated-list-column-name "Archive" tabulated-list-id #s(package-desc super-save (20220531 1745) "Auto-save buffers, based on your activity." ((emacs (24 4))) single "melpa" nil ((:commit . "6f6512bc44b09f7187e58772892fa330f4518c12") (:authors ("Bozhidar Batsov" . "bozhidar@batsov.com")) (:maintainer "Bozhidar Batsov" . "bozhidar@batsov.com") (:keywords "convenience") (:url . "https://github.com/bbatsov/super-save")) nil) tabulated-list-entry [("super-save" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc super-save (20220531 1745) "Auto-save buffers, based on your activity." ((emacs (24 4))) single "melpa" nil ((:commit . "6f6512bc44b09f7187e58772892fa330f4518c12") (:authors ("Bozhidar Batsov" . "bozhidar@batsov.com")) (:maintainer "Bozhidar Batsov" . "bozhidar@batsov.com") (:keywords "convenience") (:url . "https://github.com/bbatsov/super-save")) nil) action package-menu-describe-package) #("20220531.1745" 0 13 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa" 0 5 (font-lock-face package-status-available)) #("Auto-save buffers, based on your activity." 0 42 (font-lock-face package-description))]) 76 118 (font-lock-face package-description help-echo #("Description: Auto-save buffers, based on your activity." 13 55 (font-lock-face package-description)) tabulated-list-column-name "Description" tabulated-list-id #s(package-desc super-save (20220531 1745) "Auto-save buffers, based on your activity." ((emacs (24 4))) single "melpa" nil ((:commit . "6f6512bc44b09f7187e58772892fa330f4518c12") (:authors ("Bozhidar Batsov" . "bozhidar@batsov.com")) (:maintainer "Bozhidar Batsov" . "bozhidar@batsov.com") (:keywords "convenience") (:url . "https://github.com/bbatsov/super-save")) nil) tabulated-list-entry [("super-save" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc super-save (20220531 1745) "Auto-save buffers, based on your activity." ((emacs (24 4))) single "melpa" nil ((:commit . "6f6512bc44b09f7187e58772892fa330f4518c12") (:authors ("Bozhidar Batsov" . "bozhidar@batsov.com")) (:maintainer "Bozhidar Batsov" . "bozhidar@batsov.com") (:keywords "convenience") (:url . "https://github.com/bbatsov/super-save")) nil) action package-menu-describe-package) #("20220531.1745" 0 13 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa" 0 5 (font-lock-face package-status-available)) #("Auto-save buffers, based on your activity." 0 42 (font-lock-face package-description))])) #("auto" 0 4 (ivy-index 1)) #("46  (auto-save-mode 1)" 0 1 (swiper-line-number 46) 4 5 (fontified t face (rainbow-delimiters-depth-1-face)) 5 21 (fontified t) 21 22 (fontified t face (rainbow-delimiters-depth-1-face))) #("edit" 0 4 (ivy-index 0)) #("887   func editNodeV2(index int, node *model.EvaluationLineNode, dbItem *model.Staff, item *model.StaffInternal) error {" 0 1 (swiper-line-number 887) 6 10 (fontified t face font-lock-keyword-face) 10 11 (fontified t) 11 21 (fontified t face font-lock-function-name-face) 21 22 (fontified t face (rainbow-delimiters-depth-1-face)) 22 27 (fontified t face font-lock-variable-name-face) 27 28 (fontified t) 28 31 (fontified t face font-lock-type-face) 31 33 (fontified t) 33 37 (fontified t face font-lock-variable-name-face) 37 39 (fontified t) 39 63 (fontified t face font-lock-type-face) 63 65 (fontified t) 65 71 (fontified t face font-lock-variable-name-face) 71 73 (fontified t) 73 84 (fontified t face font-lock-type-face) 84 86 (fontified t) 86 90 (fontified t face font-lock-variable-name-face) 90 92 (fontified t) 92 111 (fontified t face font-lock-type-face) 111 112 (fontified t face (rainbow-delimiters-depth-1-face)) 112 113 (fontified t) 113 118 (fontified t face font-lock-type-face) 118 119 (fontified t) 119 120 (fontified t face (rainbow-delimiters-depth-1-face))) #("regul" 0 5 (ivy-index 7)) #("793   func regularApply(dbItem *model.Staff, item *model.StaffInternal, photos []string, comment string) error {" 0 1 (swiper-line-number 793) 6 10 (fontified t face font-lock-keyword-face) 10 11 (fontified t) 11 23 (fontified t face font-lock-function-name-face) 23 24 (fontified t face (rainbow-delimiters-depth-1-face)) 24 30 (fontified t face font-lock-variable-name-face) 30 32 (fontified t) 32 43 (fontified t face font-lock-type-face) 43 45 (fontified t) 45 49 (fontified t face font-lock-variable-name-face) 49 51 (fontified t) 51 70 (fontified t face font-lock-type-face) 70 72 (fontified t) 72 78 (fontified t face font-lock-variable-name-face) 78 79 (fontified t) 79 80 (fontified t face (rainbow-delimiters-depth-2-face)) 80 81 (fontified t face (rainbow-delimiters-depth-2-face)) 81 87 (fontified t face font-lock-type-face) 87 89 (fontified t) 89 96 (fontified t face font-lock-variable-name-face) 96 97 (fontified t) 97 103 (fontified t face font-lock-type-face) 103 104 (fontified t face (rainbow-delimiters-depth-1-face)) 104 105 (fontified t) 105 110 (fontified t face font-lock-type-face) 110 111 (fontified t) 111 112 (fontified t face (rainbow-delimiters-depth-1-face))) #("staffNode" 0 9 (ivy-index 1)) #("647   		staffNode = &model.EvaluationLineNode{UserId: dbItem.UserId, Status: NODE_WAIT_TODO, Type: NODE_STAFF_SET_SCORE}" 0 1 (swiper-line-number 647) 6 21 (fontified t) 21 45 (fontified t face font-lock-type-face) 45 46 (fontified t face (rainbow-delimiters-depth-3-face)) 46 52 (fontified t face font-lock-constant-face) 52 61 (fontified t) 61 67 (fontified t) 67 69 (fontified t) 69 75 (fontified t face font-lock-constant-face) 75 93 (fontified t) 93 97 (fontified t face font-lock-constant-face) 97 119 (fontified t) 119 120 (fontified t face (rainbow-delimiters-depth-3-face))) #("find" 0 4 (ivy-index 2)) #("299  func Find(param *model.SearchParams) (int, []*Record) {" 0 1 (swiper-line-number 299) 5 9 (fontified t face font-lock-keyword-face) 9 10 (fontified t) 10 14 (fontified t face font-lock-function-name-face) 14 15 (fontified t face (rainbow-delimiters-depth-1-face)) 15 20 (fontified t face font-lock-variable-name-face) 20 22 (fontified t) 22 40 (fontified t face font-lock-type-face) 40 41 (fontified t face (rainbow-delimiters-depth-1-face)) 41 42 (fontified t) 42 43 (fontified t face (rainbow-delimiters-depth-1-face)) 43 46 (fontified t face font-lock-type-face) 46 48 (fontified t) 48 49 (fontified t face (rainbow-delimiters-depth-2-face)) 49 50 (fontified t face (rainbow-delimiters-depth-2-face)) 50 51 (fontified t) 51 57 (fontified t face font-lock-type-face) 57 58 (fontified t face (rainbow-delimiters-depth-1-face)) 58 59 (fontified t) 59 60 (fontified t face (rainbow-delimiters-depth-1-face))) #("hist" 0 4 (ivy-index 0)) #("901   		turnHistroyNode(node, nodes[index], index, line, nodes, dbItem, item)" 0 1 (swiper-line-number 901) 6 8 (fontified t) 8 23 (fontified t face font-lock-function-name-face) 23 24 (fontified t face (rainbow-delimiters-depth-3-face)) 24 35 (fontified t) 35 36 (fontified t face (rainbow-delimiters-depth-4-face)) 36 41 (fontified t) 41 42 (fontified t face (rainbow-delimiters-depth-4-face)) 42 76 (fontified t) 76 77 (fontified t face (rainbow-delimiters-depth-3-face))) #("EvaluationLineNode" 0 18 (ivy-index 6)) #("413   	SearchMap.Do(nil, &model.EvaluationLineNode{UserId: dbItem.Id, Status: NODE_PASS, Type: NODE_STAFF_CONFIRM}, dbItem)" 0 1 (swiper-line-number 413) 6 17 (fontified t) 17 19 (fontified t face font-lock-function-name-face) 19 20 (fontified t face (rainbow-delimiters-depth-2-face)) 20 23 (fontified t face font-lock-constant-face) 23 26 (fontified t) 26 50 (fontified t face font-lock-type-face) 50 51 (fontified t face (rainbow-delimiters-depth-3-face)) 51 57 (fontified t face font-lock-constant-face) 57 70 (fontified t) 70 76 (fontified t face font-lock-constant-face) 76 89 (fontified t) 89 93 (fontified t face font-lock-constant-face) 93 113 (fontified t) 113 114 (fontified t face (rainbow-delimiters-depth-3-face)) 114 122 (fontified t) 122 123 (fontified t face (rainbow-delimiters-depth-2-face))) #("478   	SearchMap.Do(nodes[0], &model.EvaluationLineNode{UserId: dbItem.Id, Status: NODE_PASS, Type: NODE_STAFF_SET_SCORE}, dbItem) //生成导师搜索数据" 0 1 (swiper-line-number 478) 6 17 (fontified t) 17 19 (fontified t face font-lock-function-name-face) 19 20 (fontified t face (rainbow-delimiters-depth-2-face)) 20 25 (fontified t) 25 26 (fontified t face (rainbow-delimiters-depth-3-face)) 26 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-3-face)) 28 31 (fontified t) 31 55 (fontified t face font-lock-type-face) 55 56 (fontified t face (rainbow-delimiters-depth-3-face)) 56 62 (fontified t face font-lock-constant-face) 62 75 (fontified t) 75 81 (fontified t face font-lock-constant-face) 81 94 (fontified t) 94 98 (fontified t face font-lock-constant-face) 98 120 (fontified t) 120 121 (fontified t face (rainbow-delimiters-depth-3-face)) 121 129 (fontified t) 129 130 (fontified t face (rainbow-delimiters-depth-2-face)) 130 131 (fontified t) 131 133 (fontified t face font-lock-comment-delimiter-face) 133 141 (fontified t face font-lock-comment-face)) #("589   func nextNode(lastNode bool, dbItem *model.Staff, item *model.StaffInternal, line *model.EvaluationLineInternal, nodes []*model.EvaluationLineNode, result bool, comment string) {" 0 1 (swiper-line-number 589) 6 10 (fontified t face font-lock-keyword-face) 10 11 (fontified t) 11 19 (fontified t face font-lock-function-name-face) 19 20 (fontified t face (rainbow-delimiters-depth-1-face)) 20 28 (fontified t face font-lock-variable-name-face) 28 29 (fontified t) 29 33 (fontified t face font-lock-type-face) 33 35 (fontified t) 35 41 (fontified t face font-lock-variable-name-face) 41 43 (fontified t) 43 54 (fontified t face font-lock-type-face) 54 56 (fontified t) 56 60 (fontified t face font-lock-variable-name-face) 60 62 (fontified t) 62 81 (fontified t face font-lock-type-face) 81 83 (fontified t) 83 87 (fontified t face font-lock-variable-name-face) 87 89 (fontified t) 89 117 (fontified t face font-lock-type-face) 117 119 (fontified t) 119 124 (fontified t face font-lock-variable-name-face) 124 125 (fontified t) 125 126 (fontified t face (rainbow-delimiters-depth-2-face)) 126 127 (fontified t face (rainbow-delimiters-depth-2-face)) 127 128 (fontified t) 128 152 (fontified t face font-lock-type-face) 152 154 (fontified t) 154 160 (fontified t face font-lock-variable-name-face) 160 161 (fontified t) 161 165 (fontified t face font-lock-type-face) 165 167 (fontified t) 167 174 (fontified t face font-lock-variable-name-face) 174 175 (fontified t) 175 181 (fontified t face font-lock-type-face) 181 182 (fontified t face (rainbow-delimiters-depth-1-face)) 182 183 (fontified t) 183 184 (fontified t face (rainbow-delimiters-depth-1-face))) #("647   		staffNode = &model.EvaluationLineNode{UserId: dbItem.Id, Status: NODE_WAIT_TODO, Type: NODE_STAFF_SET_SCORE}" 0 1 (swiper-line-number 647) 6 21 (fontified t) 21 45 (fontified t face font-lock-type-face) 45 46 (fontified t face (rainbow-delimiters-depth-3-face)) 46 52 (fontified t face font-lock-constant-face) 52 65 (fontified t) 65 71 (fontified t face font-lock-constant-face) 71 89 (fontified t) 89 93 (fontified t face font-lock-constant-face) 93 115 (fontified t) 115 116 (fontified t face (rainbow-delimiters-depth-3-face))) #("confrim" 0 7 (ivy-index 2)) #("350   	// 	return fmt.Errorf(\"confrim: getLineAndNodes %d\", dbItem.Id)" 0 1 (swiper-line-number 350) 6 7 (fontified t) 7 11 (fontified t face font-lock-comment-delimiter-face) 11 70 (fontified t face font-lock-comment-face)) #("901   		turnHistroyNode(node, nodes[index], index, line, nodes, dbItem, item)" 0 1 (swiper-line-number 901) 6 8 (fontified t) 8 23 (fontified t face font-lock-function-name-face) 23 24 (fontified t face (rainbow-delimiters-depth-3-face)) 24 35 (fontified t) 35 36 (fontified t face (rainbow-delimiters-depth-4-face)) 36 41 (fontified t) 41 42 (fontified t face (rainbow-delimiters-depth-4-face)) 42 76 (fontified t) 76 77 (fontified t face (rainbow-delimiters-depth-3-face))) #("881   func editNodeV2(index int, node *model.EvaluationLineNode, dbItem *model.Staff, item *model.StaffInternal) error {" 0 1 (swiper-line-number 881) 6 10 (fontified t face font-lock-keyword-face) 10 11 (fontified t) 11 21 (fontified t face font-lock-function-name-face) 21 22 (fontified t face (rainbow-delimiters-depth-1-face)) 22 27 (fontified t face font-lock-variable-name-face) 27 28 (fontified t) 28 31 (fontified t face font-lock-type-face) 31 33 (fontified t) 33 37 (fontified t face font-lock-variable-name-face) 37 39 (fontified t) 39 63 (fontified t face font-lock-type-face) 63 65 (fontified t) 65 71 (fontified t face font-lock-variable-name-face) 71 73 (fontified t) 73 84 (fontified t face font-lock-type-face) 84 86 (fontified t) 86 90 (fontified t face font-lock-variable-name-face) 90 92 (fontified t) 92 111 (fontified t face font-lock-type-face) 111 112 (fontified t face (rainbow-delimiters-depth-1-face)) 112 113 (fontified t) 113 118 (fontified t face font-lock-type-face) 118 119 (fontified t) 119 120 (fontified t face (rainbow-delimiters-depth-1-face))) #("880   func editNodeV2(index int, node *model.EvaluationLineNode, dbItem *model.Staff, item *model.StaffInternal) error {" 0 1 (swiper-line-number 880) 6 10 (fontified t face font-lock-keyword-face) 10 11 (fontified t) 11 21 (fontified t face font-lock-function-name-face) 21 22 (fontified t face (rainbow-delimiters-depth-1-face)) 22 27 (fontified t face font-lock-variable-name-face) 27 28 (fontified t) 28 31 (fontified t face font-lock-type-face) 31 33 (fontified t) 33 37 (fontified t face font-lock-variable-name-face) 37 39 (fontified t) 39 63 (fontified t face font-lock-type-face) 63 65 (fontified t) 65 71 (fontified t face font-lock-variable-name-face) 71 73 (fontified t) 73 84 (fontified t face font-lock-type-face) 84 86 (fontified t) 86 90 (fontified t face font-lock-variable-name-face) 90 92 (fontified t) 92 111 (fontified t face font-lock-type-face) 111 112 (fontified t face (rainbow-delimiters-depth-1-face)) 112 113 (fontified t) 113 118 (fontified t face font-lock-type-face) 118 119 (fontified t) 119 120 (fontified t face (rainbow-delimiters-depth-1-face))) #("anynode" 0 7 (ivy-index 0)) #("607   func anyNode(userId int64, item *model.StaffInternal, dbItem *model.Staff, result bool, comment, key string) error {" 0 1 (swiper-line-number 607) 6 10 (fontified t face font-lock-keyword-face) 10 11 (fontified t) 11 18 (fontified t face font-lock-function-name-face) 18 19 (fontified t face (rainbow-delimiters-depth-1-face)) 19 25 (fontified t face font-lock-variable-name-face) 25 26 (fontified t) 26 31 (fontified t face font-lock-type-face) 31 33 (fontified t) 33 37 (fontified t face font-lock-variable-name-face) 37 39 (fontified t) 39 58 (fontified t face font-lock-type-face) 58 60 (fontified t) 60 66 (fontified t face font-lock-variable-name-face) 66 68 (fontified t) 68 79 (fontified t face font-lock-type-face) 79 81 (fontified t) 81 87 (fontified t face font-lock-variable-name-face) 87 88 (fontified t) 88 92 (fontified t face font-lock-type-face) 92 94 (fontified t) 94 101 (fontified t face font-lock-variable-name-face) 101 103 (fontified t) 103 106 (fontified t face font-lock-variable-name-face) 106 107 (fontified t) 107 113 (fontified t face font-lock-type-face) 113 114 (fontified t face (rainbow-delimiters-depth-1-face)) 114 115 (fontified t) 115 120 (fontified t face font-lock-type-face) 120 121 (fontified t) 121 122 (fontified t face (rainbow-delimiters-depth-1-face))) #("review" 0 6 (ivy-index 8)) #("286   		nextNode.SearchType = ToSearchType(NODE_INDICATOR_REVIEW)" 0 1 (swiper-line-number 286) 6 10 (fontified t) 10 30 (fontified t) 30 42 (fontified t face font-lock-function-name-face) 42 43 (fontified t face (rainbow-delimiters-depth-3-face)) 43 64 (fontified t) 64 65 (fontified t face (rainbow-delimiters-depth-3-face))) #("383  	if err := logic.Apply(userId); err != nil {" 0 1 (swiper-line-number 383) 5 6 (fontified t) 6 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 12 (fontified t face font-lock-variable-name-face) 12 22 (fontified t) 22 27 (fontified t face font-lock-function-name-face) 27 28 (fontified t face (rainbow-delimiters-depth-2-face)) 28 34 (fontified t) 34 35 (fontified t face (rainbow-delimiters-depth-2-face)) 35 44 (fontified t) 44 47 (fontified t face font-lock-constant-face) 47 48 (fontified t) 48 49 (fontified t face (rainbow-delimiters-depth-2-face))) #("record" 0 6 (ivy-index 0)) #("72   func (p *ProbationController) GetRecords(param map[string]any) *https.ResponseBody {" 0 1 (swiper-line-number 72) 5 9 (fontified t face font-lock-keyword-face) 9 10 (fontified t) 10 11 (fontified t face (rainbow-delimiters-depth-1-face)) 11 12 (fontified t face font-lock-variable-name-face) 12 14 (fontified t) 14 33 (fontified t face font-lock-type-face) 33 34 (fontified t face (rainbow-delimiters-depth-1-face)) 34 35 (fontified t) 35 45 (fontified t face font-lock-function-name-face) 45 46 (fontified t face (rainbow-delimiters-depth-1-face)) 46 51 (fontified t face font-lock-variable-name-face) 51 52 (fontified t) 52 55 (fontified t face font-lock-keyword-face) 55 56 (fontified t face (rainbow-delimiters-depth-2-face)) 56 62 (fontified t face font-lock-type-face) 62 63 (fontified t face (rainbow-delimiters-depth-2-face)) 63 66 (fontified t face font-lock-type-face) 66 67 (fontified t face (rainbow-delimiters-depth-1-face)) 67 69 (fontified t) 69 87 (fontified t face font-lock-type-face) 87 88 (fontified t) 88 89 (fontified t face (rainbow-delimiters-depth-1-face))) #("377  	userId := parser.GetInt64(\"account_user_id\")" 0 1 (ivy-index 376 swiper-line-number 377) 1 5 (ivy-index 376) 5 6 (ivy-index 376 fontified t) 6 12 (ivy-index 376 face font-lock-variable-name-face fontified t) 12 23 (ivy-index 376 fontified t) 23 31 (ivy-index 376 face font-lock-function-name-face fontified t) 31 32 (ivy-index 376 face (rainbow-delimiters-depth-2-face) fontified t) 32 49 (ivy-index 376 face font-lock-string-face fontified t) 49 50 (ivy-index 376 face (rainbow-delimiters-depth-2-face) fontified t)) #("378   func apply(dbItem *model.Staff) error { //确认失败 进入 申诉期" 0 1 (swiper-line-number 378) 6 10 (fontified t face font-lock-keyword-face) 10 11 (fontified t) 11 16 (fontified t face font-lock-function-name-face) 16 17 (fontified t face (rainbow-delimiters-depth-1-face)) 17 23 (fontified t face font-lock-variable-name-face) 23 25 (fontified t) 25 36 (fontified t face font-lock-type-face) 36 37 (fontified t face (rainbow-delimiters-depth-1-face)) 37 38 (fontified t) 38 43 (fontified t face font-lock-type-face) 43 44 (fontified t) 44 45 (fontified t face (rainbow-delimiters-depth-1-face)) 45 46 (fontified t) 46 48 (fontified t face font-lock-comment-delimiter-face) 48 59 (fontified t face font-lock-comment-face)) #("calc" 0 4 (ivy-index 0)) #("169  func (e *EvaluationIndicatorInternal) CalcScore(wightTeacher, wightLeader float64) {" 0 1 (swiper-line-number 169) 5 9 (fontified t face font-lock-keyword-face) 9 10 (fontified t) 10 11 (fontified t face (rainbow-delimiters-depth-1-face)) 11 12 (fontified t face font-lock-variable-name-face) 12 14 (fontified t) 14 41 (fontified t face font-lock-type-face) 41 42 (fontified t face (rainbow-delimiters-depth-1-face)) 42 43 (fontified t) 43 52 (fontified t face font-lock-function-name-face) 52 53 (fontified t face (rainbow-delimiters-depth-1-face)) 53 65 (fontified t face font-lock-variable-name-face) 65 67 (fontified t) 67 78 (fontified t face font-lock-variable-name-face) 78 79 (fontified t) 79 86 (fontified t face font-lock-type-face) 86 87 (fontified t face (rainbow-delimiters-depth-1-face)) 87 88 (fontified t) 88 89 (fontified t face (rainbow-delimiters-depth-1-face))) #("287   		nextNode.SearchType = ToSearchType(NODE_INDICATOR_REVIEW)" 0 1 (swiper-line-number 287) 6 30 (fontified t) 30 42 (fontified t face font-lock-function-name-face) 42 43 (fontified t face (rainbow-delimiters-depth-3-face)) 43 64 (fontified t) 64 65 (fontified t face (rainbow-delimiters-depth-3-face))) #("276   	ulog.Info(\"review\", zap.Any(\"prepare_indicator\", dbItem.PrepareIndicator), zap.Any(\"scheduler\", dbItem.Scheduler), zap.Any(\"nodeIndex\", nodeIndex), zap.Any(\"result\", result))" 0 1 (swiper-line-number 276) 6 12 (fontified t) 12 16 (face font-lock-function-name-face fontified t) 16 17 (face (rainbow-delimiters-depth-2-face) fontified t) 17 25 (face font-lock-string-face fontified t) 25 31 (fontified t) 31 34 (face font-lock-function-name-face fontified t) 34 35 (face (rainbow-delimiters-depth-3-face) fontified t) 35 54 (face font-lock-string-face fontified t) 54 79 (fontified t) 79 80 (face (rainbow-delimiters-depth-3-face) fontified t) 80 86 (fontified t) 86 89 (face font-lock-function-name-face fontified t) 89 90 (face (rainbow-delimiters-depth-3-face) fontified t) 90 101 (face font-lock-string-face fontified t) 101 119 (fontified t) 119 120 (face (rainbow-delimiters-depth-3-face) fontified t) 120 126 (fontified t) 126 129 (face font-lock-function-name-face fontified t) 129 130 (face (rainbow-delimiters-depth-3-face) fontified t) 130 141 (face font-lock-string-face fontified t) 141 152 (fontified t) 152 153 (face (rainbow-delimiters-depth-3-face) fontified t) 153 159 (fontified t) 159 162 (face font-lock-function-name-face fontified t) 162 163 (face (rainbow-delimiters-depth-3-face) fontified t) 163 171 (face font-lock-string-face fontified t) 171 179 (fontified t) 179 180 (face (rainbow-delimiters-depth-3-face) fontified t) 180 181 (face (rainbow-delimiters-depth-2-face) fontified t)) #("15" 0 2 (ivy-index 1)) #("52  (setq-default display-line-numbers-width 15)" 0 1 (swiper-line-number 52) 4 5 (face (rainbow-delimiters-depth-1-face) fontified t) 5 17 (face font-lock-keyword-face fontified t) 17 47 (fontified t) 47 48 (face (rainbow-delimiters-depth-1-face) fontified t)) #("10" 0 2 (ivy-index 0)) #("10  " 0 1 (swiper-line-number 10)) #("52  (setq-default display-line-numbers-width 10)" 0 1 (swiper-line-number 52) 4 5 (fontified t face (rainbow-delimiters-depth-1-face)) 5 17 (fontified t face font-lock-keyword-face) 17 47 (fontified t) 47 48 (fontified t face (rainbow-delimiters-depth-1-face)))))
(setq counsel-M-x-history '(#("lsp" 0 3 (ivy-index 1)) "lsp-bridge-restart-process" #("lsp-" 0 4 (ivy-index 6)) "lsp-format-buffer" #("v" 0 1 (ivy-index 0)) "vterm" #("vter" 0 4 (ivy-index 0)) "vterm" #("go" 0 2 (ivy-index 5)) "goto-line" #("pack" 0 4 (ivy-index 0)) "list-packages" #("re" 0 2 (ivy-index 0)) "restart-emacs" #("normal" 0 6 (ivy-index 0)) "normal-mode" #("list" 0 4 (ivy-index 0)) "list-packages" #("res" 0 3 (ivy-index 1)) "restart-emacs" "lsp-bridge-restart-process" "lsp-bridge-restart-process" #("restart" 0 7 (ivy-index 1)) "lsp-bridge-restart-process" #("case" 0 4 (ivy-index 0)) "upcase-word" #("upcase" 0 6 (ivy-index 3)) "upcase-word" "lsp-bridge-restart-process" "lsp-bridge-restart-process" "lsp-bridge-restart-process" "lsp-bridge-restart-process" "lsp-bridge-restart-process" #("goto-last" 0 9 (ivy-index 0)) "goto-last-change" "lsp-bridge-restart-process" "lsp-bridge-restart-process" #("im" 0 2 (ivy-index 0)) "imenu" "lsp-bridge-restart-process" #("lsp-bridge-restart-process" 0 26 (ivy-index 0)) #("dash" 0 4 (ivy-index 1)) "dashboard-open" "restart-emacs" "restart-emacs" "restart-emacs" "restart-emacs" "restart-emacs" "restart-emacs" "restart-emacs" "restart-emacs" "restart-emacs" "restart-emacs" "restart-emacs" "vterm" "restart-emacs" "lsp-bridge-mode" "imenu" #("mkdir" 0 5 (ivy-index 0)) "restart-emacs" #("ranger" 0 6 (ivy-index 0)) "vterm" #("ran" 0 3 (ivy-index 0)) "ranger-mode" #("evil-toggle-fold" 0 16 (ivy-index 0)) #("fold" 0 4 (ivy-index 5)) "evil-open-fold" "ranger-go" "restart-emacs" "restart-emacs" #("dirvish" 0 7 (ivy-index 0)) "restart-emacs" #("di" 0 2 (ivy-index 0)) "dirvish-quit" "dirvish-quit" "dirvish-fd" #("dir" 0 3 (ivy-index 1)) "dired" "restart-emacs" #("r" 0 1 (ivy-index 0)) "restart-emacs" "restart-emacs" "restart-emacs" #("lsp-bridge-res" 0 14 (ivy-index 0)) #("ter" 0 3 (ivy-index 0)) "vterm" #("nor" 0 3 (ivy-index 0)) "normal-mode" #("save" 0 4 (ivy-index 0)) "save-buffer" #("vt" 0 2 (ivy-index 0)) "vterm" "normal-mode" "restart-emacs" #("norma" 0 5 (ivy-index 0)) "normal-mode" "normal-mode" "restart-emacs" "restart-emacs" "vterm"))
(setq file-name-history '("~/note/tool/mysql.md" #("/Users/keeyu/code/self/new-tool/fx/src/main.rs" 0 46 (ivy-index 2)) #("/Users/keeyu/Library/Mobile Documents/com~apple~CloudDocs/note/doc/main.org" 0 75 (ivy-index 0)) #("/Users/keeyu/.zshrc" 0 19 (ivy-index 0)) #("/Users/keeyu/code/self/new-tool/jiami_v4/" 0 41 (ivy-index 2)) #("/Users/keeyu/Library/Mobile Documents/com~apple~CloudDocs/note/doc/tool/clickhouse.org" 0 86 (ivy-index 0)) #("/Users/keeyu/Library/Mobile Documents/com~apple~CloudDocs/note/doc/base/jiami.org" 0 81 (ivy-index 8)) #("/Users/keeyu/code/self/new-tool/redis_lock_list/" 0 48 (ivy-index 0)) #("/Users/keeyu/Library/Mobile Documents/com~apple~CloudDocs/note/doc/learn_org.org" 0 80 (ivy-index 0)) #("/Users/keeyu/code/company/ures/src/ures/handler/file_handler.go" 0 63 (ivy-index 0)) #("/Users/keeyu/code/self/new-tool/jiami_v2/main.go" 0 48 (ivy-index 6)) #("/Users/keeyu/code/self/new-tool/jiami_v3/" 0 41 (ivy-index 1)) #("/Users/keeyu/code/self/new-tool/jiami_v3/main.go" 0 48 (ivy-index 5)) #("/Users/keeyu/Library/Mobile Documents/com~apple~CloudDocs/note/doc/org.org" 0 74 (ivy-index 0)) #("/Users/keeyu/code/self/new-tool/ali_oss/main.go" 0 47 (ivy-index 1)) #("/Users/keeyu/Library/Mobile Documents/com~apple~CloudDocs/note/doc/work/image.org" 0 81 (ivy-index 0)) #("/Users/keeyu/code/self/tool/jiami_v2/" 0 37 (ivy-index 1)) #("/Users/keeyu/code/company/server/conf/beta/aliyun.toml" 0 54 (ivy-index 3)) #("/Users/keeyu/.emacs.d/lisp/" 0 27 (ivy-index 0)) #("/Users/keeyu/code/company/ures/src/ures/main.go" 0 47 (ivy-index 0)) #("/Users/keeyu/code/self/new-tool/watermark/main.go" 0 49 (ivy-index 8)) #("/Users/keeyu/code/self/new-tool/color/src/main.rs" 0 49 (ivy-index 3)) #("/Users/keeyu/Library/Mobile Documents/com~apple~CloudDocs/note/doc/work/card_encode.md" 0 86 (ivy-index 0)) #("/Users/keeyu/code/self/new-tool/color/target/debug/log.log" 0 58 (ivy-index 0)) #("/Users/keeyu/code/self/new-tool/" 0 32 (ivy-index 0)) #("/Users/keeyu/note/work/script.md" 0 32 (ivy-index 0)) #("/Users/keeyu/code/self/tool/color/target/debug/log.log" 0 54 (ivy-index 0)) #("/Users/keeyu/code/self/tool/color/target/debug/" 0 47 (ivy-index 0)) #("/Users/keeyu/code/self/tool/color/src/main.rs" 0 45 (ivy-index 2)) #("/Users/keeyu/" 0 13 (ivy-index 0)) #("/Users/keeyu/code/self/tool/color/src/" 0 38 (ivy-index 0)) #("/Users/keeyu/code/self/tool/color/" 0 34 (ivy-index 0)) #("/Users/keeyu/.emacs.d/lisp/lisp.el" 0 34 (ivy-index 1)) #("/Users/keeyu/code/self/new-tool/watermark/" 0 42 (ivy-index 0)) #("/Users/keeyu/code/github/httpfs/" 0 32 (ivy-index 0)) #("/Users/keeyu/code/self/go-test/staff-notify/" 0 44 (ivy-index 2)) #("/Users/keeyu/code/company/probation/src/probation/admin/" 0 56 (ivy-index 0)) #("/Users/keeyu/code/company/probation/src/probation/admin/main.go" 0 63 (ivy-index 12)) #("/Users/keeyu/code/company/probation/src/probation/" 0 50 (ivy-index 0)) #("/Users/keeyu/note/" 0 18 (ivy-index 0)) #("/Users/keeyu/.emacs.d/init.el" 0 29 (ivy-index 1)) #("/Users/keeyu/.emacs.d/lisp/#keymap.el#" 0 38 (ivy-index 0)) #("/Users/keeyu/.emacs.d/" 0 22 (ivy-index 0)) #("/Users/keeyu/note/aganda.md" 0 27 (ivy-index 2)) #("/Users/keeyu/code/github/lsp-bridge/lsp_bridge.py" 0 49 (ivy-index 1)) #("/Users/keeyu/code/self/quant/" 0 29 (ivy-index 0)) #("/Users/keeyu/code/github/lsp-bridge/" 0 36 (ivy-index 0)) #("/Users/keeyu/.emacs.d/lisp/lsp.el" 0 33 (ivy-index 8)) #("/Users/keeyu/code/company/nas_back/" 0 35 (ivy-index 0)) #("/Users/keeyu/code/company/xutil/https/" 0 38 (ivy-index 0)) #("/Users/keeyu/code/company/xutil/" 0 32 (ivy-index 0)) #("/Users/keeyu/note/edit/emacs.md" 0 31 (ivy-index 0)) #("/Users/keeyu/code/company/probation/src/probation/admin/logic/logic_inside.go" 0 77 (ivy-index 1)) #("/Users/keeyu/note/base/linux.md" 0 31 (ivy-index 1)) #("/Users/keeyu/note/base/" 0 23 (ivy-index 0)) #("/Users/keeyu/note/lang/golang.md" 0 32 (ivy-index 0)) #("/Users/keeyu/code/company/probation/src/probation/admin/model/probation.go" 0 74 (ivy-index 0)) #("/Users/keeyu/code/company/probation/src/probation/admin/logic/search.go" 0 71 (ivy-index 0)) #("/Users/keeyu/code/company/probation/src/" 0 40 (ivy-index 2)) #("/Users/keeyu/code/company/assets_lpa/demo/usb/Cargo.toml" 0 56 (ivy-index 9)) #("/Users/keeyu/code/company/assets_lpa/" 0 37 (ivy-index 0))))
(setq minibuffer-history '("yes" "http:www.baidu.com" "make-backup-files" "auto-save-when-idle" "auto-save-visited-mode" "session" "Session" "saveplace" "goto-last" "goto" "parser" "timeout" "session" "Session" "Sessiontest" "yes" "0x01" "use-package"))
(setq extended-command-history '(#("re" 0 2 (ivy-index 0)) "restart-emacs" #("package-install" 0 15 (ivy-index 0)) #("package-in" 0 10 (ivy-index 0)) #("list" 0 4 (ivy-index 0)) "list-packages" "restart-emacs" "restart-emacs"))
(setq evil-jumps-history '((26 "/Users/keeyu/Library/Mobile Documents/com~apple~CloudDocs/note/doc/work/loophole.org") (93 "/Users/keeyu/Library/Mobile Documents/com~apple~CloudDocs/note/doc/main.org") (108 "/Users/keeyu/Library/Mobile Documents/com~apple~CloudDocs/note/doc/main.org") (195 "/Users/keeyu/code/self/new-tool/fx/src/main.rs") (220 "/Users/keeyu/code/self/new-tool/fx/src/main.rs") (1 "/Users/keeyu/code/self/new-tool/fx/src/main.rs") (281 "/Users/keeyu/Library/Mobile Documents/com~apple~CloudDocs/note/doc/tool/git.md") (177 "/Users/keeyu/Library/Mobile Documents/com~apple~CloudDocs/note/doc/tool/git.md") (299 "/Users/keeyu/Library/Mobile Documents/com~apple~CloudDocs/note/doc/learn_org.org") (308 "/Users/keeyu/Library/Mobile Documents/com~apple~CloudDocs/note/doc/learn_org.org") (106 "/Users/keeyu/Library/Mobile Documents/com~apple~CloudDocs/note/doc/main.org") (252 "/Users/keeyu/Library/Mobile Documents/com~apple~CloudDocs/note/doc/main.org") (617 "/Users/keeyu/Library/Mobile Documents/com~apple~CloudDocs/note/doc/aganda.md") (1 "/Users/keeyu/Library/Mobile Documents/com~apple~CloudDocs/note/doc/main.org") (43 "/Users/keeyu/Library/Mobile Documents/com~apple~CloudDocs/note/doc/aganda.md") (251 "/Users/keeyu/Library/Mobile Documents/com~apple~CloudDocs/note/doc/base/#linux.md#") (1847 "/Users/keeyu/.zshrc") (247 "/Users/keeyu/.zshrc") (2977 "/Users/keeyu/code/self/new-tool/jiami_v3/ucrypto/ucrypto.go") (1635 "/Users/keeyu/code/self/new-tool/jiami_v3/ucrypto/ucrypto.go")))
(setq projectile-project-command-history '#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("/Users/keeyu/code/company/xutil/" (0 0 . [nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil]) "/Users/keeyu/Library/Mobile Documents/com~apple~CloudDocs/note/doc/" (0 1 . ["add" nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil]))))
