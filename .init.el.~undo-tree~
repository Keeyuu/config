(undo-tree-save-format-version . 1)
"efb5caf788ce711761ed6a9baba86760fd58b295"
[nil nil nil nil (25633 6143 334685 0) 0 nil]
([nil nil ((#("(auto-save-mode 1)
" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 17 (fontified t) 17 18 (fontified t face (rainbow-delimiters-depth-1-face)) 18 19 (fontified t)) . 1569) (undo-tree-id82 . -5) (undo-tree-id83 . -5) (undo-tree-id84 . -18) 1574 (t 25631 5416 924370 541000)) nil (25633 6143 334684 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1248 . 1249) (#("
" 0 1 (fontified nil)) . -1267) (1248 . 1268) 1198) nil (25633 6143 334682 0) 0 nil])
([nil nil ((1248 . 1249) 1222) nil (25633 6143 334681 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1277 . 1278) (nil fontified nil 1249 . 1278) (1249 . 1278)) nil (25633 6143 334680 0) 0 nil])
([nil nil ((1277 . 1278)) nil (25633 6143 334679 0) 0 nil])
([nil nil ((1285 . 1287) (#("阿" 0 1 (fontified t face font-lock-comment-face)) . -1285) (undo-tree-id73 . -1) (#("伯" 0 1 (fontified t face font-lock-comment-face)) . -1286) (undo-tree-id74 . -1) (#("村" 0 1 (fontified t face font-lock-comment-face)) . -1287) (undo-tree-id75 . -1) 1288 (1281 . 1288) (1279 . 1281) (#("s" 0 1 (fontified t face font-lock-comment-face)) . -1279) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (#("h" 0 1 (fontified t face font-lock-comment-face)) . -1280) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (#("i" 0 1 (fontified t face font-lock-comment-face)) . -1281) (undo-tree-id80 . -1) (undo-tree-id81 . -1) 1282 (1278 . 1282)) nil (25633 6143 334678 0) 0 nil])
([nil nil ((#("(setq auto-save-when-idle t) ;失去焦点自动保存
" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 5 (fontified t face font-lock-keyword-face) 5 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-1-face)) 28 29 (fontified t) 29 30 (fontified t face font-lock-comment-delimiter-face) 30 38 (fontified t face font-lock-comment-face) 38 39 (fontified t rear-nonsticky t face font-lock-comment-face)) . 1249) (undo-tree-id64 . -6) (undo-tree-id65 . -38) (undo-tree-id66 . 1) (undo-tree-id67 . -6) (undo-tree-id68 . 14) (undo-tree-id69 . -6) (undo-tree-id70 . -24) (undo-tree-id71 . -24) (undo-tree-id72 . -24) 1273) nil (25633 6143 334670 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1312 . 1313) (nil fontified nil 1249 . 1313) (1249 . 1313)) nil (25633 6143 334664 0) 0 nil])
([nil nil ((1248 . 1249) 1209) nil (25633 6143 334663 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1373 . 1374) (nil fontified nil 1314 . 1374) (1314 . 1374)) nil (25633 6143 334663 0) 0 nil])
([nil nil ((#("(setq auto-save-visited-file-name t)
" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 5 (fontified t face font-lock-keyword-face) 5 35 (fontified t) 35 36 (fontified t face (rainbow-delimiters-depth-1-face)) 36 37 (rear-nonsticky t fontified t)) . 1277) (undo-tree-id57 . -37) (undo-tree-id58 . -36) (undo-tree-id59 . -37) (undo-tree-id60 . 37) (undo-tree-id61 . -1) (undo-tree-id62 . 2) (undo-tree-id63 . -36)) nil (25633 6143 334662 0) 0 nil])
([nil nil ((#("my-backup-directory" 0 19 (fontified t face font-lock-string-face)) . 1314) (undo-tree-id52 . -18) (undo-tree-id53 . -18) (undo-tree-id54 . -18) (undo-tree-id55 . -18) (undo-tree-id56 . -18) 1332) nil (25633 6143 334658 0) 0 nil])
([nil nil ((1322 . 1328) (1312 . 1322) (#("~/.e" 0 4 (fontified t face font-lock-string-face)) . -1312) (undo-tree-id42 . -2) (undo-tree-id43 . -2) (undo-tree-id44 . -2) (undo-tree-id45 . -2) (undo-tree-id46 . -2) (undo-tree-id47 . -2) (undo-tree-id48 . -4) (undo-tree-id49 . -4) 1316 (1315 . 1316) (1314 . 1315) (#("/" 0 1 (fontified t face font-lock-string-face)) . -1314) (undo-tree-id50 . 1) (undo-tree-id51 . -1) 1315) nil (25633 6143 334653 0) 0 nil])
([nil nil ((1363 . 1364) (1362 . 1363) (1351 . 1362) (#("n" 0 1 (fontified t face font-lock-comment-face)) . -1351) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -1352) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (#("i" 0 1 (fontified t face font-lock-comment-face)) . -1353) (undo-tree-id36 . -1) (undo-tree-id37 . -1) 1354 (1350 . 1354) (#("a" 0 1 (fontified t)) . -1350) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -1351) (undo-tree-id41 . -1) 1352 (1350 . 1352)) nil (25633 6143 334646 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . -1330) (undo-tree-id31 . -1) 1331) nil (25633 6143 334639 0) 0 nil])
([nil nil ((1331 . 1332)) nil (25633 6143 334637 0) 0 nil])
([nil nil ((1339 . 1343) (1332 . 1339) (#("x" 0 1 (fontified t face font-lock-comment-face)) . -1332) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (#("i" 0 1 (fontified t face font-lock-comment-face)) . -1333) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (#("u" 0 1 (fontified t face font-lock-comment-face)) . -1334) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (#("g" 0 1 (fontified t face font-lock-comment-face)) . -1335) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (#("a" 0 1 (fontified t face font-lock-comment-face)) . -1336) (undo-tree-id29 . -1) (undo-tree-id30 . -1) 1337 (1330 . 1337)) nil (25633 6143 334636 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1249) (undo-tree-id19 . -1) (undo-tree-id20 . -1)) nil (25633 6143 334630 0) 0 nil])
([nil nil ((1192 . 1193) 1128) nil (25633 6143 334628 0) 0 nil])
([nil nil ((1249 . 1265)) nil (25633 6143 334628 0) 0 nil])
([nil nil ((1404 . 1405) (1393 . 1404) (#("use" 0 3 (fontified t)) . -1393) (undo-tree-id17 . -3) (undo-tree-id18 . -3) 1396 (1393 . 1396) (1392 . 1394)) nil (25633 6143 334627 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1465 . 1466) (nil fontified nil 1446 . 1466) (1446 . 1466) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -1446) (undo-tree-id6 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -1447) (undo-tree-id7 . -1) (undo-tree-id8 . 1) (undo-tree-id9 . -1) 1448 (#(")" 0 1 (fontified nil)) . -1447) (1447 . 1448) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1447) (1447 . 1448) (1446 . 1448) (1443 . 1446) (1436 . 1443) (#(":config" 0 7 (fontified t face font-lock-builtin-face)) . -1436) (undo-tree-id10 . -7) (undo-tree-id11 . -7) 1443 (1436 . 1443) (1433 . 1436) (1430 . 1433) (#("nil" 0 3 (fontified t)) . -1430) (undo-tree-id12 . -3) (undo-tree-id13 . -3) 1433 (1423 . 1433) (1421 . 1423) (#(" " 0 1 (fontified t)) . -1422) (undo-tree-id14 . -1) (#(" " 0 1 (fontified t)) . -1423) (undo-tree-id15 . -1) 1424 (1422 . 1424) (#("  " 0 2 (fontified nil)) . 1421) (undo-tree-id16 . -2) (1420 . 1424) (nil rear-nonsticky nil 1419 . 1420) (nil fontified nil 1405 . 1420) (1405 . 1420)) nil (25633 6143 334622 0) 0 nil])
([nil nil ((1444 . 1452) (#("s" 0 1 (fontified t face font-lock-comment-face)) . -1444) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (#("h" 0 1 (fontified t face font-lock-comment-face)) . -1445) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (#("i" 0 1 (fontified t face font-lock-comment-face)) . -1446) (undo-tree-id4 . -1) (undo-tree-id5 . -1) 1447 (1443 . 1447)) nil (25633 6143 334609 0) 0 nil])
([nil nil ((#("-" 0 1 (face font-lock-constant-face fontified t)) . -1415) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (#("m" 0 1 (face font-lock-constant-face fontified t)) . -1416) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (#("o" 0 1 (face font-lock-constant-face fontified t)) . -1417) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (#("d" 0 1 (face font-lock-constant-face fontified t)) . -1418) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -1419) (undo-tree-id294 . -1) 1420 (t 25633 6143 338435 827000)) nil (25633 8632 312732 0) 0 nil])
([nil nil ((1425 . 1427) (1418 . 1425) (#(":ensre" 0 6 (fontified t face font-lock-builtin-face)) . -1418) (undo-tree-id0 . -6) (undo-tree-id1 . -6) (undo-tree-id2 . -2) 1424 (1418 . 1424) (1415 . 1418) (t 25633 8632 316651 881000) 1398) nil (25633 8686 853300 0) 0 nil])
([nil nil ((2760 . 2999) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )" 0 239 (fontified nil)) . -2760) (2670 . 2759) (#("
" 0 1 (fontified nil)) . -2670) (2589 . 2671) (#(" " 0 1 (fontified nil)) . 2589) (2323 . 2590) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   '(\"4b287bfbd581ea819e5d7abe139db1fb5ba71ab945cec438c48722bea3ed6689\" default))
 '(package-selected-packages '(go-mode exec-path-from-shell flycheck ivy use-package)))" 0 436 (fontified nil)) . -2323) (t 25633 8686 856729 931000)) nil (25633 8690 679369 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1914) (undo-tree-id0 . -1) 1915 (t 25633 8690 682445 481000)) nil (25633 8764 840013 0) 0 nil])
([nil nil ((2030 . 2031) (t 25633 8764 842929 630000)) nil (25633 8786 291929 0) 0 nil])
([nil nil ((1344 . 1345) (t 25633 8786 294891 881000)) nil (25633 11779 108195 0) 0 nil])
([nil nil ((2219 . 2235) (#("
" 0 1 (fontified nil)) . -2233) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (#("(require 'lisp)" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil) 1 8 (face font-lock-keyword-face fontified nil) 8 10 (fontified nil) 10 14 (face font-lock-constant-face fontified nil) 14 15 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 2234) (undo-tree-id5 . -14) (undo-tree-id6 . 15) (undo-tree-id7 . -1) (undo-tree-id8 . 1) (undo-tree-id9 . -15) (t 25633 11779 111565 170000)) nil (25635 62952 211777 0) 0 nil])
([nil nil ((2235 . 2241) (#("z" 0 1 (face font-lock-comment-face fontified t)) . -2235) (undo-tree-id0 . -1) 2236 (2234 . 2236)) nil (25635 62952 211768 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 699 . 700) (nil fontified nil 640 . 700) (640 . 700) (t 25635 62952 216180 896000)) nil (25637 20355 152479 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 700)) nil (25637 20355 152478 0) 0 nil])
([nil nil ((699 . 700) 661) nil (25637 20355 152477 0) 0 nil])
([nil nil ((701 . 703) (#("凭" 0 1 (fontified t face font-lock-comment-face)) . -701) (undo-tree-id1 . -1) 702 (700 . 702) (#("q" 0 1 (fontified t face font-lock-comment-face)) . -700) (undo-tree-id2 . -1) (#("u" 0 1 (fontified t face font-lock-comment-face)) . -701) (undo-tree-id3 . -1) 702 (699 . 702)) nil (25637 20355 152475 0) 0 nil])
([nil nil ((#("幕" 0 1 (fontified t face font-lock-comment-face)) . -702) (undo-tree-id0 . -1) 703) nil (25637 20355 152468 0) 0 nil])
([nil nil ((2831 . 3070) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )" 0 239 (fontified nil)) . -2831) (2741 . 2830) (#("
" 0 1 (fontified nil)) . -2741) (2660 . 2742) (#(" " 0 1 (fontified nil)) . 2660) (2394 . 2661) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   '(\"4b287bfbd581ea819e5d7abe139db1fb5ba71ab945cec438c48722bea3ed6689\" default))
 '(package-selected-packages '(go-mode exec-path-from-shell flycheck ivy use-package)))" 0 436 (fontified nil)) . -2394) (t 25637 20355 156878 612000)) nil (25637 21001 895040 0) 0 nil])
([nil current ((2831 . 3070) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )" 0 239 (fontified nil)) . -2831) (2741 . 2830) (#("
" 0 1 (fontified nil)) . -2741) (2660 . 2742) (#(" " 0 1 (fontified nil)) . 2660) (2394 . 2661) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   '(\"4b287bfbd581ea819e5d7abe139db1fb5ba71ab945cec438c48722bea3ed6689\" default))
 '(package-selected-packages '(go-mode exec-path-from-shell flycheck ivy use-package)))" 0 436 (fontified nil)) . -2394) (t 25637 21001 899003 733000)) nil (25637 25349 402811 0) 0 nil])
nil
