(undo-tree-save-format-version . 1)
"ce58f68df52886144bfd692615bca5b1cc9a7161"
[nil nil nil nil (25671 18128 223588 0) 0 nil]
([nil nil ((nil rear-nonsticky nil 281 . 282) (nil fontified nil 215 . 282) (215 . 282) (t 25667 44154 842746 402000)) nil (25671 18128 223585 0) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -666) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (#("=" 0 1 (fontified t)) . -667) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (#("=" 0 1 (fontified t)) . -668) (undo-tree-id4 . -1) (#("=" 0 1 (fontified t)) . -669) (undo-tree-id5 . -1) (#("=" 0 1 (fontified t)) . -670) (undo-tree-id6 . -1) (#("=" 0 1 (fontified t)) . -671) (undo-tree-id7 . -1) (#("=" 0 1 (fontified t)) . -672) (undo-tree-id8 . -1) 673 (666 . 673) (#("=" 0 1 (fontified t)) . -666) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (#("=" 0 1 (fontified t)) . -667) (undo-tree-id11 . -1) (undo-tree-id12 . -1) 668 (666 . 668) (#("=" 0 1 (fontified t)) . -666) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (#("=" 0 1 (fontified t)) . -667) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) 668 (666 . 668) (t 25671 18128 225756 662000)) nil (25671 18262 216840 0) 0 nil])
([nil nil ((279 . 280) (#("3" 0 1 (fontified t face font-lock-string-face)) . -279) (undo-tree-id21 . -1) 280 (t 25671 18262 219508 280000)) nil (25671 18384 798013 0) 0 nil])
([nil nil ((279 . 280) (#("2" 0 1 (face font-lock-string-face fontified t)) . -279) (undo-tree-id0 . -1) 280 (t 25671 18384 800616 947000)) nil (25671 18427 229421 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 3317 . 3318) (nil fontified nil 3317 . 3318) (nil fontified nil 3316 . 3317) (nil fontified nil 3315 . 3316) (nil fontified nil 3314 . 3315) (nil fontified nil 3306 . 3314) (nil fontified nil 3305 . 3306) (nil fontified nil 3300 . 3305) (nil fontified nil 3297 . 3300) (nil fontified nil 3293 . 3297) (nil fontified nil 3292 . 3293) (nil fontified nil 3290 . 3292) (nil fontified nil 3289 . 3290) (nil fontified nil 3258 . 3289) (nil fontified nil 3254 . 3258) (nil fontified nil 3253 . 3254) (nil fontified nil 3248 . 3253) (nil fontified nil 3245 . 3248) (nil fontified nil 3244 . 3245) (nil fontified nil 3243 . 3244) (nil fontified nil 3212 . 3243) (nil fontified nil 3211 . 3212) (3211 . 3318) (3210 . 3211) (t 25671 18427 232159 46000)) nil (25671 48792 992328 0) 0 nil])
([nil nil ((3318 . 3319)) nil (25671 48792 992321 0) 0 nil])
([nil nil ((#("(setq prettify-symbols-alist
      '(
	(\"=<\" . \"yes\")
       )
)	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 36 (fontified t) 36 37 (face (rainbow-delimiters-depth-2-face) fontified t) 37 39 (fontified t) 39 40 (face (rainbow-delimiters-depth-3-face) fontified t) 40 44 (face font-lock-string-face fontified t) 44 47 (fontified t) 47 52 (face font-lock-string-face fontified t) 52 53 (face (rainbow-delimiters-depth-3-face) fontified t) 53 61 (fontified t) 61 62 (face (rainbow-delimiters-depth-2-face) fontified t) 62 63 (fontified t) 63 64 (face (rainbow-delimiters-depth-1-face) fontified t) 64 65 (fontified t)) . 3253) (undo-tree-id0 . -65) (undo-tree-id1 . -9) (undo-tree-id2 . -64) (undo-tree-id3 . -64) (undo-tree-id4 . -65) (undo-tree-id5 . -55) (undo-tree-id6 . -55) (undo-tree-id7 . -55) (undo-tree-id8 . -55) (undo-tree-id9 . -55) (undo-tree-id10 . -55) (undo-tree-id11 . -55) (undo-tree-id12 . -55) (undo-tree-id13 . -55) (undo-tree-id14 . -55) (undo-tree-id15 . -55) (undo-tree-id16 . -55) (undo-tree-id17 . -55) (undo-tree-id18 . -55) (undo-tree-id19 . -55) (undo-tree-id20 . -55) (undo-tree-id21 . -55) (undo-tree-id22 . -55) (undo-tree-id23 . -55) (undo-tree-id24 . -55) (undo-tree-id25 . -55) (undo-tree-id26 . -55) (undo-tree-id27 . -55) (undo-tree-id28 . -38) (undo-tree-id29 . -38) (undo-tree-id30 . -38) (undo-tree-id31 . -38) (undo-tree-id32 . -38) (undo-tree-id33 . -38) (undo-tree-id34 . -38) (undo-tree-id35 . -38) (undo-tree-id36 . -38) (undo-tree-id37 . -38) (undo-tree-id38 . -38) (undo-tree-id39 . -38) (undo-tree-id40 . -38) (undo-tree-id41 . -38) (undo-tree-id42 . -38) (undo-tree-id43 . -38) (undo-tree-id44 . -38) (undo-tree-id45 . -38) (undo-tree-id46 . -38) (undo-tree-id47 . -38) (undo-tree-id48 . -38) (undo-tree-id49 . -38) (undo-tree-id50 . -38) (undo-tree-id51 . -38) (undo-tree-id52 . -38) (undo-tree-id53 . -38) (undo-tree-id54 . -38) (undo-tree-id55 . -38) (undo-tree-id56 . -38) (undo-tree-id57 . -38) (undo-tree-id58 . -38) (undo-tree-id59 . -38) (undo-tree-id60 . -38) (undo-tree-id61 . -38) (undo-tree-id62 . -38) (undo-tree-id63 . -38) (undo-tree-id64 . -38) (undo-tree-id65 . -38) (undo-tree-id66 . -38) (undo-tree-id67 . -38) (undo-tree-id68 . -38) (undo-tree-id69 . -38) (undo-tree-id70 . -38) (undo-tree-id71 . -38) (undo-tree-id72 . -38) (undo-tree-id73 . -38) (undo-tree-id74 . -38) (undo-tree-id75 . -38) (undo-tree-id76 . -38) (undo-tree-id77 . -38) (undo-tree-id78 . -38) (undo-tree-id79 . -38) (undo-tree-id80 . -38) (undo-tree-id81 . -38) (undo-tree-id82 . -38) (undo-tree-id83 . -38) (undo-tree-id84 . -38) (undo-tree-id85 . -38) (undo-tree-id86 . -38) (undo-tree-id87 . -38) (undo-tree-id88 . -38) (undo-tree-id89 . -38) (undo-tree-id90 . -38) (undo-tree-id91 . -38) (undo-tree-id92 . -38) (undo-tree-id93 . -38) (undo-tree-id94 . -38) (undo-tree-id95 . -38) (undo-tree-id96 . -38) (undo-tree-id97 . -38) (undo-tree-id98 . -38) (undo-tree-id99 . -38) (undo-tree-id100 . -38) (undo-tree-id101 . -38) (undo-tree-id102 . -38) (undo-tree-id103 . -38) (undo-tree-id104 . -38) (undo-tree-id105 . -38) (undo-tree-id106 . -38) (undo-tree-id107 . -38) (undo-tree-id108 . -38) (undo-tree-id109 . -38) (undo-tree-id110 . -38) (undo-tree-id111 . -38) (undo-tree-id112 . -38) (undo-tree-id113 . -38) (undo-tree-id114 . -38) (undo-tree-id115 . -38) (undo-tree-id116 . -38) (undo-tree-id117 . -38) (undo-tree-id118 . -38) (undo-tree-id119 . -38) (undo-tree-id120 . -38) (undo-tree-id121 . -38) (undo-tree-id122 . -38) (undo-tree-id123 . -38) (undo-tree-id124 . -38) (undo-tree-id125 . -38) (undo-tree-id126 . -38) (undo-tree-id127 . -38) (undo-tree-id128 . -38) (undo-tree-id129 . -38) (undo-tree-id130 . -38) (undo-tree-id131 . -38) (undo-tree-id132 . -38) (undo-tree-id133 . -38) (undo-tree-id134 . -38) (undo-tree-id135 . -38) (undo-tree-id136 . -38) (undo-tree-id137 . -38) (undo-tree-id138 . -38) (undo-tree-id139 . -38) (undo-tree-id140 . -38) (undo-tree-id141 . -38) (undo-tree-id142 . -38) (undo-tree-id143 . -38) (undo-tree-id144 . -38) (undo-tree-id145 . -38) (undo-tree-id146 . -38) (undo-tree-id147 . -38) (undo-tree-id148 . -38) (undo-tree-id149 . -38) (undo-tree-id150 . -38) (undo-tree-id151 . -38) (undo-tree-id152 . -38) (undo-tree-id153 . -38) (undo-tree-id154 . -38) (undo-tree-id155 . -38) (undo-tree-id156 . -38) (undo-tree-id157 . -38) (undo-tree-id158 . -38) (undo-tree-id159 . -38) (undo-tree-id160 . -38) (undo-tree-id161 . -38) (undo-tree-id162 . -38) (undo-tree-id163 . -38) (undo-tree-id164 . -38) (undo-tree-id165 . -38) (undo-tree-id166 . -38) (undo-tree-id167 . -38) (undo-tree-id168 . -38) (undo-tree-id169 . -38) (undo-tree-id170 . -38) (undo-tree-id171 . -38) (undo-tree-id172 . -38) (undo-tree-id173 . -38) (undo-tree-id174 . -38) (undo-tree-id175 . -38) (undo-tree-id176 . -38) (undo-tree-id177 . -38) (undo-tree-id178 . -38) (undo-tree-id179 . -38) (undo-tree-id180 . -38) (undo-tree-id181 . -38) (undo-tree-id182 . -38) (undo-tree-id183 . -38) (undo-tree-id184 . -38) (undo-tree-id185 . -38) (undo-tree-id186 . -38) (undo-tree-id187 . -38) (undo-tree-id188 . -38) (undo-tree-id189 . -38) (undo-tree-id190 . -38) (undo-tree-id191 . -38) (undo-tree-id192 . -38) (undo-tree-id193 . -38) (undo-tree-id194 . -38) (undo-tree-id195 . -38) (undo-tree-id196 . -38) (undo-tree-id197 . -38) (undo-tree-id198 . -38) (undo-tree-id199 . -38) (undo-tree-id200 . -38) (undo-tree-id201 . -38) (undo-tree-id202 . -38) (undo-tree-id203 . -38) (undo-tree-id204 . -38) (undo-tree-id205 . -38) (undo-tree-id206 . -38) (undo-tree-id207 . -38) (undo-tree-id208 . -38) (undo-tree-id209 . -38) (undo-tree-id210 . -38) (undo-tree-id211 . -38) (undo-tree-id212 . -38) (undo-tree-id213 . -38) (undo-tree-id214 . -38) (undo-tree-id215 . -38) (undo-tree-id216 . -38) (undo-tree-id217 . -38) (undo-tree-id218 . -38) (undo-tree-id219 . -38) (undo-tree-id220 . -38) (undo-tree-id221 . -38) (undo-tree-id222 . -38) (undo-tree-id223 . -38) (undo-tree-id224 . -38) (undo-tree-id225 . -38) (undo-tree-id226 . -38) (undo-tree-id227 . -38) (undo-tree-id228 . -38) (undo-tree-id229 . -38) (undo-tree-id230 . -38) (undo-tree-id231 . -38) (undo-tree-id232 . -38) (undo-tree-id233 . -38) (undo-tree-id234 . -38) (undo-tree-id235 . -38) (undo-tree-id236 . -38) (undo-tree-id237 . -38) (undo-tree-id238 . -38) (undo-tree-id239 . -38) (undo-tree-id240 . -38) (undo-tree-id241 . -38) (undo-tree-id242 . -38) (undo-tree-id243 . -38) (undo-tree-id244 . -38) (undo-tree-id245 . -38) (undo-tree-id246 . -38) (undo-tree-id247 . -38) (undo-tree-id248 . -38) (undo-tree-id249 . -38) (undo-tree-id250 . -38) (undo-tree-id251 . -38) (undo-tree-id252 . -38) (undo-tree-id253 . -38) (undo-tree-id254 . -38) (undo-tree-id255 . -38) (undo-tree-id256 . -38) (undo-tree-id257 . -38) (undo-tree-id258 . -38) (undo-tree-id259 . -38) (undo-tree-id260 . -38) (undo-tree-id261 . -38) (undo-tree-id262 . -38) (undo-tree-id263 . -38) (undo-tree-id264 . -38) (undo-tree-id265 . -38) (undo-tree-id266 . -38) (undo-tree-id267 . -38) (undo-tree-id268 . -38) (undo-tree-id269 . -38) (undo-tree-id270 . -38) (undo-tree-id271 . -38) (undo-tree-id272 . -38) (undo-tree-id273 . -38) (undo-tree-id274 . -38) (undo-tree-id275 . -38) (undo-tree-id276 . -38) (undo-tree-id277 . -38) (undo-tree-id278 . -38) (undo-tree-id279 . -38) (undo-tree-id280 . -38) (undo-tree-id281 . -38) (undo-tree-id282 . -38) (undo-tree-id283 . -38) (undo-tree-id284 . -38) (undo-tree-id285 . -38) (undo-tree-id286 . -38) (undo-tree-id287 . -38) (undo-tree-id288 . -38) (undo-tree-id289 . -38) (undo-tree-id290 . -38) (undo-tree-id291 . -38) (undo-tree-id292 . -38) (undo-tree-id293 . -38) (undo-tree-id294 . -38) (undo-tree-id295 . -38) (undo-tree-id296 . -38) (undo-tree-id297 . -38) (undo-tree-id298 . -38) (undo-tree-id299 . -38) (undo-tree-id300 . -38) (undo-tree-id301 . -38) (undo-tree-id302 . -38) (undo-tree-id303 . -38) (undo-tree-id304 . -38) (undo-tree-id305 . -38) (undo-tree-id306 . -38) (undo-tree-id307 . -38) (undo-tree-id308 . -38) (undo-tree-id309 . -38) (undo-tree-id310 . -38) (undo-tree-id311 . -38) (undo-tree-id312 . -38) (undo-tree-id313 . -38) (undo-tree-id314 . -38) (undo-tree-id315 . -38) (undo-tree-id316 . -38) (undo-tree-id317 . -29) (undo-tree-id318 . -29) (undo-tree-id319 . -29) (undo-tree-id320 . -29) (undo-tree-id321 . -29) (undo-tree-id322 . -29) (undo-tree-id323 . -29) (undo-tree-id324 . -29) (undo-tree-id325 . -29) (undo-tree-id326 . -29) (undo-tree-id327 . -29) (undo-tree-id328 . -29) (undo-tree-id329 . -29) (undo-tree-id330 . -29) (undo-tree-id331 . -29) (undo-tree-id332 . -29) (undo-tree-id333 . -29) (undo-tree-id334 . -29) (undo-tree-id335 . -29) (undo-tree-id336 . -29) (undo-tree-id337 . -29) (undo-tree-id338 . -29) (undo-tree-id339 . -29) (undo-tree-id340 . -29) (undo-tree-id341 . -29) (undo-tree-id342 . -29) (undo-tree-id343 . -29) (undo-tree-id344 . -29) (undo-tree-id345 . -29) (undo-tree-id346 . -29) (undo-tree-id347 . -29) (undo-tree-id348 . -29) (undo-tree-id349 . -29) (undo-tree-id350 . -29) (undo-tree-id351 . -29) (undo-tree-id352 . -29) (undo-tree-id353 . -29) (undo-tree-id354 . -29) (undo-tree-id355 . -29) (undo-tree-id356 . -29) (undo-tree-id357 . -29) (undo-tree-id358 . -29) (undo-tree-id359 . -29) (undo-tree-id360 . -29) (undo-tree-id361 . -29) (undo-tree-id362 . -29) (undo-tree-id363 . -29) (undo-tree-id364 . -29) (undo-tree-id365 . -29) (undo-tree-id366 . -29) (undo-tree-id367 . -29) (undo-tree-id368 . -29) (undo-tree-id369 . -29) (undo-tree-id370 . -29) (undo-tree-id371 . -29) (undo-tree-id372 . -29) (undo-tree-id373 . -29) (undo-tree-id374 . -29) (undo-tree-id375 . -29) (undo-tree-id376 . -29) (undo-tree-id377 . -29) (undo-tree-id378 . -29) (undo-tree-id379 . -29) (undo-tree-id380 . -29) (undo-tree-id381 . -29) (undo-tree-id382 . -29) (undo-tree-id383 . -29) (undo-tree-id384 . -29) (undo-tree-id385 . -29) (undo-tree-id386 . -29) (undo-tree-id387 . -29) (undo-tree-id388 . -29) (undo-tree-id389 . -29) (undo-tree-id390 . -29) (undo-tree-id391 . -29) (undo-tree-id392 . -29) (undo-tree-id393 . -29) (undo-tree-id394 . -29) (undo-tree-id395 . -29) (undo-tree-id396 . -29) (undo-tree-id397 . -29) (undo-tree-id398 . -29) (undo-tree-id399 . -29) (undo-tree-id400 . -29) (undo-tree-id401 . -29) (undo-tree-id402 . -29) (undo-tree-id403 . -29) (undo-tree-id404 . -29) (undo-tree-id405 . -29) (undo-tree-id406 . -29) (undo-tree-id407 . -29) (undo-tree-id408 . -29) (undo-tree-id409 . -29) (undo-tree-id410 . -29) (undo-tree-id411 . -29) (undo-tree-id412 . -29) (undo-tree-id413 . -29) (undo-tree-id414 . -29) (undo-tree-id415 . -29) (undo-tree-id416 . -29) (undo-tree-id417 . -29) (undo-tree-id418 . -29) (undo-tree-id419 . -29) (undo-tree-id420 . -29) (undo-tree-id421 . -29) (undo-tree-id422 . -29) (undo-tree-id423 . -29) (undo-tree-id424 . -29) (undo-tree-id425 . -29) (undo-tree-id426 . -29) (undo-tree-id427 . -29) (undo-tree-id428 . -29) (undo-tree-id429 . -29) (undo-tree-id430 . -29) (undo-tree-id431 . -29) (undo-tree-id432 . -29) (undo-tree-id433 . -29) (undo-tree-id434 . -29) (undo-tree-id435 . -29) (undo-tree-id436 . -29) (undo-tree-id437 . -29) (undo-tree-id438 . -29) (undo-tree-id439 . -29) (undo-tree-id440 . -29) (undo-tree-id441 . -29) (undo-tree-id442 . -29) (undo-tree-id443 . -29) (undo-tree-id444 . -29) (undo-tree-id445 . -29) (undo-tree-id446 . -29) (undo-tree-id447 . -29) (undo-tree-id448 . -29) (undo-tree-id449 . -29) (undo-tree-id450 . -29) (undo-tree-id451 . -29) (undo-tree-id452 . -29) (undo-tree-id453 . -29) (undo-tree-id454 . -29) (undo-tree-id455 . -29) (undo-tree-id456 . -29) (undo-tree-id457 . -29) (undo-tree-id458 . -29) (undo-tree-id459 . -29) (undo-tree-id460 . -29) (undo-tree-id461 . -29) (undo-tree-id462 . -29) (undo-tree-id463 . -29) (undo-tree-id464 . -29) (undo-tree-id465 . -29) (undo-tree-id466 . -29) (undo-tree-id467 . -29) (undo-tree-id468 . -29) (undo-tree-id469 . -29) (undo-tree-id470 . -29) (undo-tree-id471 . -29) (undo-tree-id472 . -29) (undo-tree-id473 . -29) (undo-tree-id474 . -29) (undo-tree-id475 . -29) (undo-tree-id476 . -29) (undo-tree-id477 . -29) (undo-tree-id478 . -29) (undo-tree-id479 . -29) (undo-tree-id480 . -29) (undo-tree-id481 . -29) (undo-tree-id482 . -29) (undo-tree-id483 . -29) (undo-tree-id484 . -29) (undo-tree-id485 . -29) (undo-tree-id486 . -29) (undo-tree-id487 . -29) (undo-tree-id488 . -29) (undo-tree-id489 . -29) (undo-tree-id490 . -29) (undo-tree-id491 . -29) (undo-tree-id492 . -29) (undo-tree-id493 . -29) (undo-tree-id494 . -29) (undo-tree-id495 . -29) (undo-tree-id496 . -29) (undo-tree-id497 . -29) (undo-tree-id498 . -29) (undo-tree-id499 . -29) (undo-tree-id500 . -29) (undo-tree-id501 . -29) (undo-tree-id502 . -29) (undo-tree-id503 . -29) (undo-tree-id504 . -29) (undo-tree-id505 . -29) (undo-tree-id506 . -29) (undo-tree-id507 . -29) (undo-tree-id508 . -29) (undo-tree-id509 . -29) (undo-tree-id510 . -29) (undo-tree-id511 . -29) (undo-tree-id512 . -29) (undo-tree-id513 . -29) (undo-tree-id514 . -29) (undo-tree-id515 . -29) (undo-tree-id516 . -29) (undo-tree-id517 . -29) (undo-tree-id518 . -29) (undo-tree-id519 . -29) (undo-tree-id520 . -29) (undo-tree-id521 . -29) (undo-tree-id522 . -29) (undo-tree-id523 . -29) (undo-tree-id524 . -29) (undo-tree-id525 . -29) (undo-tree-id526 . -29) (undo-tree-id527 . -29) (undo-tree-id528 . -29) (undo-tree-id529 . -29) (undo-tree-id530 . -29) (undo-tree-id531 . -29) (undo-tree-id532 . -29) (undo-tree-id533 . -29) (undo-tree-id534 . -29) (undo-tree-id535 . -29) (undo-tree-id536 . -29) (undo-tree-id537 . -29) (undo-tree-id538 . -29) (undo-tree-id539 . -29) (undo-tree-id540 . -29) (undo-tree-id541 . -29) (undo-tree-id542 . -29) (undo-tree-id543 . -29) (undo-tree-id544 . -29) (undo-tree-id545 . -29) (undo-tree-id546 . -29) (undo-tree-id547 . -29) (undo-tree-id548 . -29) (undo-tree-id549 . -29) (undo-tree-id550 . -29) (undo-tree-id551 . -29) (undo-tree-id552 . -29) (undo-tree-id553 . -29) (undo-tree-id554 . -29) (undo-tree-id555 . -29) (undo-tree-id556 . -29) (undo-tree-id557 . -29) (undo-tree-id558 . -29) (undo-tree-id559 . -29) (undo-tree-id560 . -29) (undo-tree-id561 . -29) (undo-tree-id562 . -29) (undo-tree-id563 . -29) (undo-tree-id564 . -29) (undo-tree-id565 . -29) (undo-tree-id566 . -29) (undo-tree-id567 . -29) (undo-tree-id568 . -29) (undo-tree-id569 . -29) (undo-tree-id570 . -29) (undo-tree-id571 . -29) (undo-tree-id572 . -29) (undo-tree-id573 . -29) (undo-tree-id574 . -29) (undo-tree-id575 . -29) (undo-tree-id576 . -29) (undo-tree-id577 . -29) (undo-tree-id578 . -29) (undo-tree-id579 . -29) (undo-tree-id580 . -29) (undo-tree-id581 . -29) (undo-tree-id582 . -29) (undo-tree-id583 . -29) (undo-tree-id584 . -29) (undo-tree-id585 . -29) (undo-tree-id586 . -29) (undo-tree-id587 . -29) (undo-tree-id588 . -29) (undo-tree-id589 . -29) (undo-tree-id590 . -29) (undo-tree-id591 . -29) (undo-tree-id592 . -29) (undo-tree-id593 . -29) (undo-tree-id594 . -29) (undo-tree-id595 . -29) (undo-tree-id596 . -29) (undo-tree-id597 . -29) (undo-tree-id598 . -29) (undo-tree-id599 . -29) (undo-tree-id600 . -29) (undo-tree-id601 . -29) (undo-tree-id602 . -29) (undo-tree-id603 . -29) (undo-tree-id604 . -29) (undo-tree-id605 . 65) (undo-tree-id606 . -1) (undo-tree-id607 . 2) (undo-tree-id608 . -64) (t 25671 48792 994883 268000)) nil (25671 48980 482439 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 3458 . 3459) (nil fontified nil 3253 . 3459) (3253 . 3459)) nil (25671 48980 482115 0) 0 nil])
([nil nil ((3378 . 3379) (#("+" 0 1 (face font-lock-string-face fontified t)) . -3378) (undo-tree-id609 . -1) 3379 (3378 . 3379) (#("=" 0 1 (face font-lock-string-face fontified t)) . -3377) (undo-tree-id610 . -1) 3378 (t 25671 48980 485383 7000)) nil (25671 48999 888841 0) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -3460) (undo-tree-id16 . -1) (#("a" 0 1 (fontified t)) . -3461) (undo-tree-id17 . -1) (#("m" 0 1 (fontified t)) . -3462) (undo-tree-id18 . -1) (#("b" 0 1 (fontified t)) . -3463) (undo-tree-id19 . -1) (#("d" 0 1 (fontified t)) . -3464) (undo-tree-id20 . -1) (#("a" 0 1 (fontified t)) . -3465) (undo-tree-id21 . -1) 3466 (3460 . 3466) (#("lam" 0 3 (fontified t)) . -3460) (undo-tree-id22 . -3) (undo-tree-id23 . -3) (undo-tree-id24 . -1) (undo-tree-id25 . -3) 3463 (3460 . 3463) (t 25671 48999 891545 128000)) nil (25671 49074 864973 0) 0 nil])
([nil nil ((3460 . 3462)) nil (25671 49074 864968 0) 0 nil])
([nil nil ((3460 . 3462) (#("<" 0 1 (fontified t)) . -3460) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#(">" 0 1 (fontified t)) . -3461) (undo-tree-id12 . -1) (undo-tree-id13 . -1) 3462 (3461 . 3462) (#("=" 0 1 (fontified t composition (0 2 [8804]) prettify-symbols-start 3460 prettify-symbols-end 3462)) . -3461) (undo-tree-id14 . -1) (undo-tree-id15 . -1) 3462) nil (25671 49074 864967 0) 0 nil])
([nil nil ((#(">" 0 1 (fontified t)) . -3460) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("=" 0 1 (fontified t composition (1 2 [8805]) prettify-symbols-start 3460 prettify-symbols-end 3462)) . -3461) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 3462) nil (25671 49074 864961 0) 0 nil])
([nil nil ((#("(global-prettify-symbols-mode +1)
;; 符号替换
(add-hook 'after-change-major-mode-hook
          (lambda ()
            (setq prettify-symbols-alist
                  '((\"<=\" . ?≤)
                    (\">=\" . ?≥)))
            (prettify-symbols-mode)))
" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 32 (fontified t) 32 33 (fontified t face (rainbow-delimiters-depth-1-face)) 33 34 (fontified t) 34 37 (fontified t face font-lock-comment-delimiter-face) 37 42 (fontified t face font-lock-comment-face) 42 43 (fontified t face (rainbow-delimiters-depth-1-face)) 43 92 (fontified t) 92 93 (fontified t face (rainbow-delimiters-depth-2-face)) 93 99 (fontified t face font-lock-keyword-face) 99 100 (fontified t) 100 101 (fontified t face (rainbow-delimiters-depth-3-face)) 101 102 (fontified t face (rainbow-delimiters-depth-3-face)) 102 115 (fontified t) 115 116 (fontified t face (rainbow-delimiters-depth-3-face)) 116 120 (fontified t face font-lock-keyword-face) 120 163 (fontified t) 163 164 (fontified t face (rainbow-delimiters-depth-4-face)) 164 165 (fontified t face (rainbow-delimiters-depth-5-face)) 165 169 (fontified t face font-lock-string-face) 169 174 (fontified t) 174 175 (fontified t face (rainbow-delimiters-depth-5-face)) 175 196 (fontified t) 196 197 (fontified t face (rainbow-delimiters-depth-5-face)) 197 201 (fontified t face font-lock-string-face) 201 206 (fontified t) 206 207 (fontified t face (rainbow-delimiters-depth-5-face)) 207 208 (fontified t face (rainbow-delimiters-depth-4-face)) 208 209 (fontified t face (rainbow-delimiters-depth-3-face)) 209 222 (fontified t) 222 223 (fontified t face (rainbow-delimiters-depth-3-face)) 223 244 (fontified t) 244 245 (fontified t face (rainbow-delimiters-depth-3-face)) 245 246 (fontified t face (rainbow-delimiters-depth-2-face)) 246 247 (fontified t face (rainbow-delimiters-depth-1-face)) 247 248 (fontified t)) . 3211) (undo-tree-id0 . -247) (undo-tree-id1 . -247) (undo-tree-id2 . -125) (undo-tree-id3 . -247) (undo-tree-id4 . -247) (undo-tree-id5 . -247) 3458) nil (25671 49074 864956 0) 0 nil])
([nil nil ((2996 . 3235) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )" 0 239 (fontified nil)) . -2996) (2993 . 2995) (#("
" 0 1 (fontified nil)) . -2993) (2822 . 2994) (#(" " 0 1 (fontified nil)) . 2822) (2792 . 2823) (#("
" 0 1 (fontified nil)) . -2792) (2711 . 2793) (#(" " 0 1 (fontified nil)) . 2711) (2445 . 2712) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   '(\"4b287bfbd581ea819e5d7abe139db1fb5ba71ab945cec438c48722bea3ed6689\" default))
 '(package-selected-packages
   '(org project which-key vterm rust-mode markdown-mode marginalia evil dash counsel amx go-mode exec-path-from-shell flycheck ivy use-package)))" 0 524 (fontified nil)) . -2445) (t 25671 49074 867147 738000)) nil (25671 56558 322488 0) 0 nil])
([nil nil ((3011 . 3250) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )" 0 239 (fontified nil)) . -3011) (3008 . 3010) (#("
" 0 1 (fontified nil)) . -3008) (2822 . 3009) (#(" " 0 1 (fontified nil)) . 2822) (2792 . 2823) (#("
" 0 1 (fontified nil)) . -2792) (2711 . 2793) (#(" " 0 1 (fontified nil)) . 2711) (2445 . 2712) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   '(\"4b287bfbd581ea819e5d7abe139db1fb5ba71ab945cec438c48722bea3ed6689\" default))
 '(package-selected-packages
   '(js-react-redux-yasnippets org project which-key vterm rust-mode markdown-mode marginalia evil dash counsel amx go-mode exec-path-from-shell flycheck ivy use-package)))" 0 550 (fontified nil)) . -2445) (t 25671 56558 325367 578000)) nil (25671 56711 110607 0) 0 nil])
([nil nil ((3021 . 3260) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )" 0 239 (fontified nil)) . -3021) (3018 . 3020) (#("
" 0 1 (fontified nil)) . -3018) (2822 . 3019) (#(" " 0 1 (fontified nil)) . 2822) (2792 . 2823) (#("
" 0 1 (fontified nil)) . -2792) (2711 . 2793) (#(" " 0 1 (fontified nil)) . 2711) (2445 . 2712) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   '(\"4b287bfbd581ea819e5d7abe139db1fb5ba71ab945cec438c48722bea3ed6689\" default))
 '(package-selected-packages
   '(react-snippets js-react-redux-yasnippets org project which-key vterm rust-mode markdown-mode marginalia evil dash counsel amx go-mode exec-path-from-shell flycheck ivy use-package)))" 0 565 (fontified nil)) . -2445) (t 25671 56711 113545 462000)) nil (25675 28273 218121 0) 0 nil])
([nil nil ((3035 . 3274) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )" 0 239 (fontified nil)) . -3035) (3032 . 3034) (#("
" 0 1 (fontified nil)) . -3032) (2822 . 3033) (#(" " 0 1 (fontified nil)) . 2822) (2792 . 2823) (#("
" 0 1 (fontified nil)) . -2792) (2711 . 2793) (#(" " 0 1 (fontified nil)) . 2711) (2445 . 2712) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   '(\"4b287bfbd581ea819e5d7abe139db1fb5ba71ab945cec438c48722bea3ed6689\" default))
 '(package-selected-packages
   '(json-mode react-snippets js-react-redux-yasnippets org project which-key vterm rust-mode markdown-mode marginalia evil dash counsel amx go-mode exec-path-from-shell flycheck ivy use-package)))" 0 575 (fontified nil)) . -2445) (t 25675 28273 223815 556000)) nil (25675 28301 648779 0) 0 nil])
([nil nil ((3025 . 3264) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )" 0 239 (fontified nil)) . -3025) (3022 . 3024) (#("
" 0 1 (fontified nil)) . -3022) (2822 . 3023) (#(" " 0 1 (fontified nil)) . 2822) (2792 . 2823) (#("
" 0 1 (fontified nil)) . -2792) (2711 . 2793) (#(" " 0 1 (fontified nil)) . 2711) (2445 . 2712) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   '(\"4b287bfbd581ea819e5d7abe139db1fb5ba71ab945cec438c48722bea3ed6689\" default))
 '(package-selected-packages
   '(json-reformat json-mode react-snippets js-react-redux-yasnippets org project which-key vterm rust-mode markdown-mode marginalia evil dash counsel amx go-mode exec-path-from-shell flycheck ivy use-package)))" 0 589 (fontified nil)) . -2445) (t 25675 28301 651289 118000)) nil (25675 30225 525236 0) 0 nil])
([nil nil ((2999 . 3238) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )" 0 239 (fontified nil)) . -2999) (2996 . 2998) (#("
" 0 1 (fontified nil)) . -2996) (2822 . 2997) (#(" " 0 1 (fontified nil)) . 2822) (2792 . 2823) (#("
" 0 1 (fontified nil)) . -2792) (2711 . 2793) (#(" " 0 1 (fontified nil)) . 2711) (2445 . 2712) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   '(\"4b287bfbd581ea819e5d7abe139db1fb5ba71ab945cec438c48722bea3ed6689\" default))
 '(package-selected-packages
   '(json-reformat react-snippets js-react-redux-yasnippets org project which-key vterm rust-mode markdown-mode marginalia evil dash counsel amx go-mode exec-path-from-shell flycheck ivy use-package)))" 0 579 (fontified nil)) . -2445) (t 25675 30225 527739 151000)) nil (25675 30250 958451 0) 0 nil])
([nil nil ((2984 . 3223) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )" 0 239 (fontified nil)) . -2984) (2981 . 2983) (#("
" 0 1 (fontified nil)) . -2981) (2822 . 2982) (#(" " 0 1 (fontified nil)) . 2822) (2792 . 2823) (#("
" 0 1 (fontified nil)) . -2792) (2711 . 2793) (#(" " 0 1 (fontified nil)) . 2711) (2445 . 2712) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   '(\"4b287bfbd581ea819e5d7abe139db1fb5ba71ab945cec438c48722bea3ed6689\" default))
 '(package-selected-packages
   '(json-reformat react-snippets org project which-key vterm rust-mode markdown-mode marginalia evil dash counsel amx go-mode exec-path-from-shell flycheck ivy use-package)))" 0 553 (fontified nil)) . -2445) (t 25675 30250 960870 441000)) nil (25675 30256 122659 0) 0 nil])
([nil nil ((2993 . 3232) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )" 0 239 (fontified nil)) . -2993) (2990 . 2992) (#("
" 0 1 (fontified nil)) . -2990) (2822 . 2991) (#(" " 0 1 (fontified nil)) . 2822) (2792 . 2823) (#("
" 0 1 (fontified nil)) . -2792) (2711 . 2793) (#(" " 0 1 (fontified nil)) . 2711) (2445 . 2712) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   '(\"4b287bfbd581ea819e5d7abe139db1fb5ba71ab945cec438c48722bea3ed6689\" default))
 '(package-selected-packages
   '(json-reformat org project which-key vterm rust-mode markdown-mode marginalia evil dash counsel amx go-mode exec-path-from-shell flycheck ivy use-package)))" 0 538 (fontified nil)) . -2445) (t 25675 30256 125148 441000)) nil (25675 39309 173277 0) 0 nil])
([nil nil ((#("#" 0 1 (fontified t)) . -215) (undo-tree-id0 . -1) 216 (#("$" 0 1 (fontified t)) . -216) (undo-tree-id1 . -1) 217 (215 . 217) (t 25675 39309 175960 575000)) nil (25675 40598 12400 0) 0 nil])
([nil nil ((apply -3 215 286 undo--wrap-and-run-primitive-undo 215 286 ((215 . 218)))) nil (25675 40598 12383 0) 0 nil])
([nil current ((#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -215) (undo-tree-id0 . -1) (#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -216) (undo-tree-id1 . -1) (#(" " 0 1 (fontified t face font-lock-comment-delimiter-face)) . -217) (undo-tree-id2 . -1) 218 (t 25675 40598 16184 316000)) nil (25675 40640 759805 0) 0 nil])
nil
